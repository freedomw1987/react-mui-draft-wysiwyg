{"version":3,"sources":["../../src/hooks/useEditor.js","../../src/hooks/useEditorFocus.js","../../src/EditorToolbar/controls/core/ButtonControl.jsx","../../src/utils/editorStateUtils.js","../../src/EditorToolbar/controls/core/ToggleInlineStyleButtonControl.jsx","../../src/types/inlineStyles.js","../../src/types/entities.js","../../src/EditorToolbar/controls/LinkAddControl/plugin.js","../../src/types/lang.js","../../src/EditorToolbar/controls/core/DropdownControl.jsx","../../src/utils/translateUtils.js","../../src/EditorToolbar/controls/BlockTypeControl/index.jsx","../../src/EditorToolbar/controls/core/ToggleBlockTypeButtonControl.jsx","../../src/types/blockStyles.js","../../src/EditorToolbar/controls/FontFamilyControl/index.jsx","../../src/EditorToolbar/controls/TextAlignControl/index.jsx","../../src/EditorToolbar/controls/FontSizeControl/index.jsx","../../src/EditorToolbar/controls/FontSizeControl/plugin.js","../../src/utils/colorUtils.js","../../src/EditorToolbar/controls/core/ColorSelectorControl/index.jsx","../../src/EditorToolbar/controls/core/ToggleInlineStyleColorSelectorControl.jsx","../../src/EditorToolbar/controls/FontColorControl/index.jsx","../../src/EditorToolbar/controls/FontBackgroundColorControl/index.jsx","../../src/EditorToolbar/controls/FontBackgroundColorControl/plugin.js","../../src/EditorToolbar/controls/ImageControl/dialogs/image/ImageToUpload.jsx","../../src/EditorToolbar/controls/ImageControl/dialogs/inputs/SizeInputs.jsx","../../src/EditorToolbar/controls/ImageControl/dialogs/ByURLDialog.jsx","../../src/EditorToolbar/controls/ImageControl/dialogs/UploadDialog.jsx","../../src/EditorToolbar/controls/ImageControl/dialogs/ResizeImageDialog.js","../../src/EditorToolbar/controls/ImageControl/index.jsx","../../src/EditorToolbar/controls/ImageControl/plugin.js","../../src/types/editorToolbar.js","../../src/EditorToolbar/controls/DividerControl/index.jsx","../../src/EditorToolbar/controls/UndoControl/index.jsx","../../src/EditorToolbar/controls/RedoControl/index.jsx","../../src/EditorToolbar/controls/BoldControl/index.jsx","../../src/EditorToolbar/controls/ItalicControl/index.jsx","../../src/EditorToolbar/controls/UnderlineControl/index.jsx","../../src/EditorToolbar/controls/StrikethroughControl/index.jsx","../../src/EditorToolbar/controls/FontColorControl/plugin.js","../../src/EditorToolbar/controls/LinkAddControl/index.jsx","../../src/EditorToolbar/controls/LinkRemoveControl/index.jsx","../../src/EditorToolbar/controls/FontFamilyControl/plugin.js","../../src/EditorToolbar/controls/TextAlignControl/plugin.js","../../src/EditorToolbar/controls/UnorderedListControl/index.jsx","../../src/EditorToolbar/controls/OrderedListControl/index.jsx","../../src/utils/fileUtils.js","../../src/types/config.js","../../src/utils/objectUtils.js","../../src/lang/translations/ca.js","../../src/lang/languages.js","../../src/lang/translations/en.js","../../src/lang/translations/es.js","../../src/utils/EditorFactories.js","../../src/EditorToolbar/index.jsx","../../src/lang/Translator.js","../../src/conversion/toHTML/block.js","../../src/index.jsx","webpack:///../src/types/blockStyles.js?b832","webpack:///../src/conversion/toHTML/block.js?fa07","../../src/conversion/toHTML/entity.js","webpack:///../src/types/entities.js?7ecd","webpack:///../src/types/inlineStyles.js?2e9e","../../src/conversion/toHTML/inlineStyle.js","../../src/conversion/toHTML/index.js","App.jsx","index.js"],"names":["useEditor","React","useEditorFocus","editor","changesCount","setChangesCount","currentChangesCount","useStyles","makeStyles","badge","props","background","badgeColor","ButtonControl","disabled","active","text","rest","classes","title","anchorOrigin","vertical","horizontal","overlap","badgeContent","invisible","variant","children","PropTypes","onClick","bool","toggleMappedInlineStyle","editorState","styleKeys","newInlineStyle","selection","newContentState","contentState","inlineStyle","Modifier","newEditorState","EditorState","currentStyle","state","RichUtils","getCurrentMappedInlineStyle","defaultInlineStyle","ToggleInlineStyleButtonControl","editorFocus","isActive","setIsActive","startKey","startOffset","endKey","endOffset","currentContent","block","allHasTheInlineStyle","styleRangesCallback","start","end","expectedStart","expectedEnd","character","hasAllSelectionTheInlineStyle","any","linkStrategy","contentBlock","callback","entityKey","entities","EditorLink","anchorEl","setAnchorEl","url","href","rel","target","ev","open","Boolean","onClose","transformOrigin","size","window","linkSelection","anchorKey","anchorOffset","focusKey","focusOffset","blockKey","LANG_PREFIX","theme","selectControl","margin","DropdownControl","minWidth","onChange","options","option","key","value","literal","translateFn","BlockTypeControl","defaultConfiguration","configuration","setValue","availableBlockTypes","blockType","avBlockType","getCurrentBlockType","newValue","ToggleBlockTypeButtonControl","number","isRequired","FontFamilyControl","pluginData","selectedFontFamilyStyle","setSelectedFontFamilyStyle","inlineStyles","Object","style","fontFamily","TextAlignControl","selectedTextAlign","setSelectedTextAlign","blockData","toggle","textAlign","FontSizeControl","selectedFontSizeStyle","setSelectedFontSizeStyle","fontSize","renderValue","isLightOrDark","color","r","g","b","Math","colorRow","display","alignContent","alignItems","padding","colorItem","height","width","borderRadius","border","cursor","ColorSelectorControl","colorsPerRow","menuId","colorRows","i","rowI","colors","handleClose","selectedColor","id","keepMounted","startIcon","fullWidth","onSelectColor","colorRowI","className","colorData","backgroundColor","ToggleInlineStyleColorSelectorControl","setSelectedColor","selectededInlineStyle","selectedColorData","FontColorControl","colorCssProp","FontBackgroundColorControl","imgWrapper","maxWidth","maxHeight","overflow","marginTop","marginBottom","ImageToUpload","src","alt","SizeInputs","onChangeHeight","maintainAspectRatio","setMaintainAspectRatio","aspectRatio","originalWidth","container","direction","justify","spacing","item","type","label","w","isNaN","parseInt","onChangeWidth","newMaintainAspectRatio","h","ByUrlDialog","onSubmit","imageURL","setImageURL","imageWidth","setImageWidth","imageOriginalWidth","setImageOriginalWidth","imageHeight","setImageHeight","imageOriginalHeight","setImageOriginalHeight","isUploading","setIsUploading","isValidImage","setIsValidImage","hasError","setHasError","changeTimeout","setChangeTimeout","handleURLChange","clearTimeout","to","setTimeout","image","this","content","gutterBottom","onEnter","originalHeight","autoFocus","dropArea","highlightDropArea","boxSizing","justifyContent","UploadDialog","uploadCallback","errorMessage","setErrorMessage","setHighlightDropArea","inputFileRef","onSelectFile","async","selectedImageUrl","e","dropAreaContent","ref","accept","files","align","onDragEnter","onDragLeave","onDragOver","onDrop","ResizeImageDialog","onSave","setWidth","setHeight","ImageControl","isUploadDialogOpened","setIsUploadDialogOpened","isUrlDialogOpened","setIsUrlDialogOpened","imageEntityToResize","handleSubmitImage","contentStateWithEntity","AtomicBlockUtils","component","button","primary","EditorMedia","entity","imgInfo","EditorImage","infoAnchorEl","setInfoAnchorEl","hideOptions","imageAlign","imageSelection","blockMap","firstBlock","selectionToStart","selectionAfter","toolbarControlTypes","divider","name","orientation","flexItem","undo","redo","bold","italic","underline","strikethrough","fontColor","plugin","fontColors","customStyleMap","fontBackgroundColor","fontBgs","fontBg","linkAdd","isDialogOpened","setIsDialogOpened","link","setLink","formRef","handleCloseDialog","entityType","mutability","entityData","contentWithEntity","applyEntityToCurrentSelection","decorators","strategy","linkRemove","blockRendererFn","blockStyles","editable","fontSizes","fontFamilies","blockStyleFn","unorderedList","orderedList","defaultToolbarControls","defaultToolbarControlsConfiguration","file","Promise","resolve","reject","reader","defaultConfig","lang","translations","draftEditor","wrapperElement","toolbar","visible","position","controls","controlsConfig","isObject","Array","mergeDeep","sources","source","code","labels","noColor","actions","add","cancel","upload","alignLeft","alignCenter","alignRight","remove","resize","dropImageHere","insertOptions","editOptions","errorMessages","notValidImage","normal","header1","header2","header3","header4","header5","header6","default","es","constructor","config","getCompositeDecorator","getPluginData","getCustomStyleMap","getBlockRenderMap","renderMap","getBlockStyleFn","classNames","result","getBlockRendererFn","getToolbarControls","getConfigItem","getToolbarControlComponents","keyCounter","map","control","getToolbarControlConfiguration","controlName","getTranslations","languages","getToolbarPosition","EditorToolbar","Translator","get","keys","EditorContext","MUIEditorState","editorFactories","editorWrapper","MUIEditor","onFocus","onBlur","editorRef","translateRef","translationsRef","toolbarVisibleConfig","isToolbarVisible","setIsToolbarVisible","isResizeImageDialogVisible","setIsResizeImageDialogVisible","resizeImageEntityKey","setResizeImageEntityKey","translator","top","bottom","editorWrapperProps","editorWrapperElement","EditorWrapper","handleFocus","handleBlur","command","newState","translate","showResizeImageDialog","hideResizeImageDialog","object","blockHTMLMap","entityHTMLMap","getData","data","isInlineStyleCollection","substr","length","getInlineStyleCollectionValue","getInlineStylesCss","toHTML","html","isListBlock","getBlockMap","blockCount","blockTag","getType","blockStyle","has","blockOpenTag","blockCloseTag","getLength","lastEntityKey","currentOpenedStylesMap","charIndex","getText","isLastChar","entityOpenTag","entityCloseTag","currentEntityKey","getEntityAt","getEntity","entityHaveToClose","entityHaveToOpen","charInlineStyles","getInlineStyleAt","styleCloseTagBeforeList","styleOpenTagList","styleCloseTagList","styleCloseTagOpenIndexList","styleCloseTagBeforeOpenIndexList","undefined","push","includes","closedIndex","j","k","optionsWrapper","paddingTop","paddingBottom","App","setEditorState","useState","isReadOnly","setIsReadOnly","setLang","toolbarPosition","setToolbarPosition","setHtml","Container","Grid","FormControlLabel","Switch","checked","InputLabel","Select","labelId","MenuItem","getCurrentContent","readOnly","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0835e59.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorContext } from '../index';\n\nexport default function useEditor() {\n    return React.useContext(EditorContext);\n}\n","import React from 'react';\nimport useEditor from './useEditor';\n\nexport default function useEditorFocus() {\n    const editor = useEditor();\n    const [changesCount, setChangesCount] = React.useState(0);\n\n    React.useEffect(() => {\n        if (changesCount > 0) editor.ref.focus();\n    }, [changesCount, editor.ref]);\n\n    return () => {\n        setChangesCount((currentChangesCount) => currentChangesCount + 1);\n    };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Badge from '@mui/material/Badge';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n    badge: (props) => ({\n        background: props.badgeColor,\n    }),\n});\n\nfunction ButtonControl({\n    children,\n    onClick,\n    disabled = false,\n    active = false,\n    text = '',\n    badgeColor = null,\n    ...rest\n}) {\n    const classes = useStyles({ badgeColor });\n    return (\n        <Tooltip title={text} aria-disabled={disabled}>\n            <span>\n                <IconButton\n                    onClick={onClick}\n                    disabled={disabled}\n                    color={active ? 'primary' : 'default'}\n                    {...rest}>\n                    <Badge\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left',\n                        }}\n                        classes={{ badge: classes.badge }}\n                        overlap=\"circular\"\n                        badgeContent=\" \"\n                        invisible={badgeColor === null}\n                        variant=\"dot\">\n                        {children}\n                    </Badge>\n                </IconButton>\n            </span>\n        </Tooltip>\n    );\n}\n\nButtonControl.propTypes = {\n    children: PropTypes.any.isRequired,\n    onClick: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n    text: PropTypes.any,\n    badgeColor: PropTypes.any,\n    active: PropTypes.bool,\n};\n\nexport default ButtonControl;\n","import { EditorState, Modifier, RichUtils } from 'draft-js';\n\nexport const toggleMappedInlineStyle = (editorState, styleKeys, newInlineStyle) => {\n    const selection = editorState.getSelection();\n\n    // Turn off the other mapped inline styled in selection\n    const newContentState = styleKeys.reduce(\n        (contentState, inlineStyle) =>\n            Modifier.removeInlineStyle(contentState, selection, inlineStyle),\n        editorState.getCurrentContent()\n    );\n\n    let newEditorState = EditorState.push(editorState, newContentState, 'change-inline-style');\n\n    const currentStyle = editorState.getCurrentInlineStyle();\n\n    if (selection.isCollapsed()) {\n        newEditorState = currentStyle.reduce((state, inlineStyle) => {\n            return RichUtils.toggleInlineStyle(state, inlineStyle);\n        }, newEditorState);\n    }\n    // If the inline style is being toggled on, apply it.\n    if (!currentStyle.has(newInlineStyle)) {\n        newEditorState = RichUtils.toggleInlineStyle(newEditorState, newInlineStyle);\n    }\n\n    return newEditorState;\n};\n\nexport const getCurrentMappedInlineStyle = (editorState, styleKeys, defaultInlineStyle = null) => {\n    const currentStyle = editorState.getCurrentInlineStyle();\n    return (\n        currentStyle.find((inlineStyle) => styleKeys.includes(inlineStyle)) || defaultInlineStyle\n    );\n};\n\nexport const hasAllSelectionTheInlineStyle = (editorState, inlineStyle) => {\n    const selection = editorState.getSelection();\n    const startKey = selection.getStartKey();\n    const startOffset = selection.getStartOffset();\n    const endKey = selection.getEndKey();\n    const endOffset = selection.getEndOffset();\n\n    const currentContent = editorState.getCurrentContent();\n\n    let block = currentContent.getBlockForKey(startKey);\n    let allHasTheInlineStyle = true;\n\n    const styleRangesCallback = (block) => (start, end) => {\n        const expectedStart = block.getKey() === startKey ? startOffset : 0;\n        const expectedEnd = block.getKey() === endKey ? endOffset : block.getLength() - 1;\n        allHasTheInlineStyle = start <= expectedStart && end >= expectedEnd;\n    };\n\n    while (block && allHasTheInlineStyle) {\n        allHasTheInlineStyle = false;\n        block.findStyleRanges(\n            (character) => character.hasStyle(inlineStyle),\n            styleRangesCallback(block)\n        );\n        if (block.getKey() !== endKey) break;\n        block = currentContent.getBlockAfter(block.getKey());\n    }\n\n    return allHasTheInlineStyle;\n};\n\nexport const getCurrentBlockType = (editorState, availableBlockTypes) => {\n    const blockType = RichUtils.getCurrentBlockType(editorState);\n    if (availableBlockTypes.find((avBlockType) => avBlockType === blockType)) return blockType;\n    return 'default';\n};\n\nexport const applyEntityToCurrentSelection = (editorState, entityType, mutability, entityData) => {\n    const content = editorState.getCurrentContent();\n    const contentWithEntity = content.createEntity(entityType, mutability, entityData);\n    const entityKey = contentWithEntity.getLastCreatedEntityKey();\n    const selection = editorState.getSelection();\n    const contentStateWithEntity = Modifier.applyEntity(contentWithEntity, selection, entityKey);\n    return EditorState.push(editorState, contentStateWithEntity, 'apply-entity');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { RichUtils } from 'draft-js';\nimport ButtonControl from './ButtonControl';\nimport { hasAllSelectionTheInlineStyle } from '../../../utils/editorStateUtils';\n\nToggleInlineStyleButtonControl.propTypes = {\n    inlineStyle: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired,\n    text: PropTypes.any,\n};\n\nfunction ToggleInlineStyleButtonControl({ inlineStyle, children, text }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [isActive, setIsActive] = React.useState(false);\n\n    React.useEffect(() => {\n        setIsActive(hasAllSelectionTheInlineStyle(editor.editorState, inlineStyle));\n    }, [editor.editorState, inlineStyle]);\n\n    const onClick = () => {\n        const newEditorState = RichUtils.toggleInlineStyle(editor.editorState, inlineStyle);\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <ButtonControl\n            text={text}\n            onClick={onClick}\n            active={isActive}\n            disabled={editor.editorState.getSelection().isCollapsed()}>\n            {children}\n        </ButtonControl>\n    );\n}\n\nexport default ToggleInlineStyleButtonControl;\n","export default {\n    BOLD: 'BOLD',\n    ITALIC: 'ITALIC',\n    UNDERLINE: 'UNDERLINE',\n    STRIKETHROUGH: 'STRIKETHROUGH',\n    CODE: 'CODE',\n    FONT_FAMILY: 'FONT_FAMILY',\n    FONT_SIZE: 'FONT_SIZE',\n    FONT_COLOR: 'FONT_COLOR',\n    FONT_BACKGROUND: 'FONT_BACKGROUND',\n};\n","export default {\n    LINK: 'LINK',\n    IMAGE: 'IMAGE',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { RichUtils, SelectionState } from 'draft-js';\nimport Link from '@mui/material/Link';\nimport entities from '../../../types/entities';\nimport Popover from '@mui/material/Popover';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\n\nconst linkStrategy = (contentBlock, callback, contentState) => {\n    contentBlock.findEntityRanges((character) => {\n        const entityKey = character.getEntity();\n        return entityKey !== null && contentState.getEntity(entityKey).getType() === entities.LINK;\n    }, callback);\n};\n\nconst EditorLink = ({ contentState, entityKey, blockKey, start, end, children }) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const { url } = contentState.getEntity(entityKey).getData();\n\n    const showOptions = (ev) => {\n        setAnchorEl(ev.currentTarget);\n    };\n\n    const hideOptions = () => {\n        setAnchorEl(null);\n    };\n\n    const openLink = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        window.open(url, '_blank');\n    };\n\n    const removeLink = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const linkSelection = SelectionState.createEmpty(blockKey).merge({\n            anchorKey: blockKey,\n            anchorOffset: start,\n            focusKey: blockKey,\n            focusOffset: end,\n        });\n\n        editor.onChange(RichUtils.toggleLink(editor.editorState, linkSelection, null));\n        editorFocus();\n    };\n\n    return (\n        <React.Fragment>\n            <Link\n                href={url}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                aria-label={url}\n                onClick={showOptions}>\n                {children}\n            </Link>\n            <Popover\n                open={Boolean(anchorEl)}\n                onClose={hideOptions}\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}>\n                <ButtonGroup size=\"small\" aria-label=\"Link options\">\n                    <Button onClick={openLink} title={`Open ${url}`}>\n                        <LaunchIcon />\n                    </Button>\n                    <Button onClick={removeLink} title=\"Remove link\">\n                        <LinkOffIcon />\n                    </Button>\n                </ButtonGroup>\n            </Popover>\n        </React.Fragment>\n    );\n};\n\nEditorLink.propTypes = {\n    contentState: PropTypes.object.isRequired,\n    entityKey: PropTypes.string.isRequired,\n    blockKey: PropTypes.string.isRequired,\n    start: PropTypes.number.isRequired,\n    end: PropTypes.number.isRequired,\n    children: PropTypes.any,\n};\n\nconst linkAddPlugin = () => ({\n    decorators: [\n        {\n            strategy: linkStrategy,\n            component: EditorLink,\n        },\n    ],\n});\n\nexport default linkAddPlugin;\n","export const LANG_PREFIX = 'lang::';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { makeStyles } from '@mui/styles';\nimport useEditor from '../../../hooks/useEditor';\nimport { translateLiteralWithPrefix } from '../../../utils/translateUtils';\n\nconst useStyles = makeStyles((theme) => ({\n    selectControl: {\n        margin: 1//theme.spacing(1),\n    },\n}));\n\nfunction DropdownControl({ value, onChange, options, minWidth = 120, ...rest }) {\n    const classes = useStyles();\n    const editor = useEditor();\n\n    return (\n        <Select\n            value={value}\n            onChange={(ev) => onChange(ev.target.value)}\n            className={classes.selectControl}\n            style={{ minWidth }}\n            {...rest}>\n            {options.map((option) => (\n                <MenuItem key={option.value || 'empty'} value={option.value}>\n                    {option.text ? translateLiteralWithPrefix(option.text, editor.translate) : ''}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nDropdownControl.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.array.isRequired,\n    minWidth: PropTypes.number,\n};\n\nexport default DropdownControl;\n","import { LANG_PREFIX } from '../types/lang';\n\nexport const translateLiteralWithPrefix = (literal, translateFn) =>\n    (typeof literal === 'string' || literal instanceof String) &&\n    literal.substr(0, LANG_PREFIX.length) === LANG_PREFIX\n        ? translateFn(literal.substr(LANG_PREFIX.length))\n        : literal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DropdownControl from '../core/DropdownControl';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { RichUtils } from 'draft-js';\nimport { getCurrentBlockType } from '../../../utils/editorStateUtils';\n\nfunction BlockTypeControl({ configuration, defaultConfiguration }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const options = configuration.options || defaultConfiguration.options;\n    const [value, setValue] = React.useState('default');\n\n    React.useEffect(() => {\n        setValue(\n            getCurrentBlockType(\n                editor.editorState,\n                options.map((option) => option.value)\n            )\n        );\n    }, [editor, options]);\n\n    const handleChange = (newValue) => {\n        setValue(newValue);\n        const newEditorState = RichUtils.toggleBlockType(\n            editor.editorState,\n            newValue === 'normal' ? '' : newValue\n        );\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return <DropdownControl options={options} onChange={handleChange} value={value} />;\n}\n\nBlockTypeControl.propTypes = {\n    configuration: PropTypes.any,\n    defaultConfiguration: PropTypes.any.isRequired,\n};\n\nexport default BlockTypeControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { RichUtils } from 'draft-js';\nimport ButtonControl from './ButtonControl';\n\nToggleBlockTypeButtonControl.propTypes = {\n    blockType: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired,\n    text: PropTypes.any,\n};\n\nfunction ToggleBlockTypeButtonControl({ blockType, children, text }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n\n    const onClick = () => {\n        const newEditorState = RichUtils.toggleBlockType(editor.editorState, blockType);\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <ButtonControl text={text} onClick={onClick}>\n            {children}\n        </ButtonControl>\n    );\n}\n\nexport default ToggleBlockTypeButtonControl;\n","export default {\n    H1: 'header-one',\n    H2: 'header-two',\n    H3: 'header-three',\n    H4: 'header-four',\n    H5: 'header-five',\n    H6: 'header-six',\n    UL: 'unordered-list-item',\n    OL: 'ordered-list-item',\n    BLOCKQUOTE: 'blockquote',\n    CODE_BLOCK: 'code-block',\n    UNSTYLED: 'unstyled',\n    ATOMIC: 'atomic',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport DropdownControl from '../core/DropdownControl';\nimport inlineStyles from '../../../types/inlineStyles';\nimport {\n    getCurrentMappedInlineStyle,\n    toggleMappedInlineStyle,\n} from '../../../utils/editorStateUtils';\n\nfunction FontFamilyControl({ pluginData }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [selectedFontFamilyStyle, setSelectedFontFamilyStyle] = React.useState(\n        `${inlineStyles.FONT_FAMILY}-default`\n    );\n    const styleKeys = Object.keys(pluginData.customStyleMap);\n\n    React.useEffect(() => {\n        setSelectedFontFamilyStyle(\n            getCurrentMappedInlineStyle(\n                editor.editorState,\n                styleKeys,\n                `${inlineStyles.FONT_FAMILY}-default`\n            )\n        );\n    }, [editor.editorState, styleKeys]);\n\n    const handleChange = (newInlineStyle) => {\n        setSelectedFontFamilyStyle(newInlineStyle);\n        const newEditorState = toggleMappedInlineStyle(\n            editor.editorState,\n            styleKeys,\n            newInlineStyle\n        );\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <DropdownControl\n            options={styleKeys.map((inlineStyle) => ({\n                value: inlineStyle,\n                text: pluginData.customStyleMap[inlineStyle].fontFamily ? (\n                    <span\n                        style={{\n                            fontFamily: pluginData.customStyleMap[inlineStyle].fontFamily,\n                        }}>\n                        {pluginData.customStyleMap[inlineStyle].fontFamily}\n                    </span>\n                ) : (\n                    'default'\n                ),\n            }))}\n            onChange={handleChange}\n            value={selectedFontFamilyStyle}\n        />\n    );\n}\n\nFontFamilyControl.propTypes = {\n    pluginData: PropTypes.any.isRequired,\n};\n\nexport default FontFamilyControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { Modifier, EditorState } from 'draft-js';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';\nimport ButtonControl from '../core/ButtonControl';\n\nfunction TextAlignControl() {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [selectedTextAlign, setSelectedTextAlign] = React.useState(null);\n\n    React.useEffect(() => {\n        const selection = editor.editorState.getSelection();\n        const currentBlock = editor.editorState\n            .getCurrentContent()\n            .getBlockForKey(selection.getStartKey());\n        const blockData = currentBlock.getData();\n        if (blockData && blockData.get('textAlign')) {\n            setSelectedTextAlign(blockData.get('textAlign'));\n        } else {\n            setSelectedTextAlign(null);\n        }\n    }, [editor.editorState]);\n\n    const toggle = (textAlign) => {\n        setSelectedTextAlign(textAlign);\n        const { editorState } = editor;\n        const newContentState = Modifier.mergeBlockData(\n            editorState.getCurrentContent(),\n            editorState.getSelection(),\n            { textAlign }\n        );\n        editor.onChange(EditorState.push(editorState, newContentState, 'change-block-data'));\n        editorFocus();\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonControl\n                active={selectedTextAlign === 'left'}\n                onClick={() => toggle('left')}\n                text={editor.translate('controls.textAlign.actions.alignLeft')}>\n                <FormatAlignLeftIcon />\n            </ButtonControl>\n            <ButtonControl\n                active={selectedTextAlign === 'center'}\n                onClick={() => toggle('center')}\n                text={editor.translate('controls.textAlign.actions.alignCenter')}>\n                <FormatAlignCenterIcon />\n            </ButtonControl>\n            <ButtonControl\n                active={selectedTextAlign === 'right'}\n                onClick={() => toggle('right')}\n                text={editor.translate('controls.textAlign.actions.alignRight')}>\n                <FormatAlignRightIcon />\n            </ButtonControl>\n            <ButtonControl\n                active={selectedTextAlign === 'justify'}\n                onClick={() => toggle('justify')}\n                text={editor.translate('controls.textAlign.actions.justify')}>\n                <FormatAlignJustifyIcon />\n            </ButtonControl>\n        </React.Fragment>\n    );\n}\n\nTextAlignControl.propTypes = {};\n\nexport default TextAlignControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport DropdownControl from '../core/DropdownControl';\nimport inlineStyles from '../../../types/inlineStyles';\nimport {\n    getCurrentMappedInlineStyle,\n    toggleMappedInlineStyle,\n} from '../../../utils/editorStateUtils';\n\nFontSizeControl.propTypes = {\n    pluginData: PropTypes.object.isRequired,\n};\n\nfunction FontSizeControl({ pluginData }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [selectedFontSizeStyle, setSelectedFontSizeStyle] = React.useState(\n        `${inlineStyles.FONT_SIZE}-default`\n    );\n    const styleKeys = Object.keys(pluginData.customStyleMap);\n\n    React.useEffect(() => {\n        setSelectedFontSizeStyle(\n            getCurrentMappedInlineStyle(\n                editor.editorState,\n                styleKeys,\n                `${inlineStyles.FONT_SIZE}-default`\n            )\n        );\n    }, [editor.editorState, styleKeys]);\n\n    const handleChange = (newInlineStyle) => {\n        setSelectedFontSizeStyle(newInlineStyle);\n        const newEditorState = toggleMappedInlineStyle(\n            editor.editorState,\n            styleKeys,\n            newInlineStyle\n        );\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <DropdownControl\n            options={styleKeys.map((inlineStyle) => ({\n                text: pluginData.customStyleMap[inlineStyle].fontSize ? (\n                    <span style={{ fontSize: pluginData.customStyleMap[inlineStyle].fontSize }}>\n                        {pluginData.customStyleMap[inlineStyle].fontSize}\n                    </span>\n                ) : (\n                    'default'\n                ),\n                value: inlineStyle,\n            }))}\n            onChange={handleChange}\n            renderValue={(style) =>\n                pluginData.customStyleMap[style].fontSize ||\n                editor.translate('controls.fontSize.labels.default')\n            }\n            value={selectedFontSizeStyle}\n            minWidth={50}\n        />\n    );\n}\n\nexport default FontSizeControl;\n","import inlineStyles from '../../../types/inlineStyles';\n\nconst fontSizePlugin = (configuration, defaultConfiguration) => {\n    const fontSizes = configuration.options || defaultConfiguration.options;\n    const customStyleMap = {};\n    for (const fontSize of fontSizes) {\n        customStyleMap[`${inlineStyles.FONT_SIZE}-${fontSize}`] =\n            fontSize === 'default' ? {} : { fontSize };\n    }\n    return { customStyleMap };\n};\n\nexport default fontSizePlugin;\n","// Created by Andreas Wik\nexport const isLightOrDark = (color) => {\n    let r, g, b;\n    // Check the format of the color, HEX or RGB?\n    if (color.match(/^rgb/)) {\n        // If HEX --> store the red, green, blue values in separate variables\n        color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        r = color[1];\n        g = color[2];\n        b = color[3];\n    } else {\n        // If RGB --> Convert it to HEX: http://gist.github.com/983661\n        color = +('0x' + color.slice(1).replace(color.length < 5 && /./g, '$&$&'));\n\n        r = color >> 16;\n        g = (color >> 8) & 255;\n        b = color & 255;\n    }\n\n    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n    const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n\n    // Using the HSP value, determine whether the color is light or dark\n    if (hsp > 127.5) {\n        return 'light';\n    } else {\n        return 'dark';\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonControl from '../ButtonControl';\nimport Popover from '@mui/material/Popover';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormatColorResetIcon from '@mui/icons-material/FormatColorReset';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { isLightOrDark } from '../../../../utils/colorUtils';\nimport Button from '@mui/material/Button';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n    colorRow: {\n        display: 'flex',\n        alignContent: 'center',\n        alignItems: 'center',\n        padding: 5,\n    },\n    colorItem: {\n        height: 25,\n        width: 25,\n        borderRadius: '50%',\n        margin: 3,\n        border: 'solid 1px #c4c4c4',\n        cursor: 'pointer',\n        display: 'flex',\n        alignContent: 'center',\n        alignItems: 'center',\n    },\n});\n\nfunction ColorSelectorControl({\n    selectedColor,\n    onSelectColor,\n    colors,\n    colorsPerRow = 10,\n    children,\n    ...rest\n}) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const menuId = Math.random().toString(36).substring(8);\n    const colorRows = [[]];\n    for (let i = 0, rowI = 0; i < colors.length; i++) {\n        if (i % colorsPerRow === 0) {\n            rowI++;\n            colorRows[rowI] = [];\n        }\n        colorRows[rowI].push(colors[i]);\n    }\n\n    const handleOpen = (ev) => {\n        setAnchorEl(ev.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonControl\n                onClick={handleOpen}\n                aria-controls={menuId}\n                aria-haspopup=\"true\"\n                badgeColor={selectedColor ? selectedColor.color : null}\n                {...rest}>\n                {children}\n            </ButtonControl>\n            <Popover\n                id={menuId}\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                }}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}>\n                <React.Fragment>\n                    <Button\n                        startIcon={<FormatColorResetIcon />}\n                        fullWidth\n                        color=\"secondary\"\n                        onClick={() => {\n                            handleClose();\n                            onSelectColor(null);\n                        }}>\n                        None\n                    </Button>\n                    {colorRows.map((colorRow, colorRowI) => (\n                        <div key={`color-row-${colorRowI}`} className={classes.colorRow}>\n                            {colorRow.map((colorData) => (\n                                <Tooltip key={colorData.value} title={colorData.text}>\n                                    <div\n                                        onClick={() => {\n                                            handleClose();\n                                            onSelectColor(colorData);\n                                        }}\n                                        className={classes.colorItem}\n                                        style={{\n                                            backgroundColor: colorData.color,\n                                        }}>\n                                        {selectedColor &&\n                                            colorData.value === selectedColor.value ? (\n                                            <CheckIcon\n                                                style={{\n                                                    color:\n                                                        isLightOrDark(colorData.color) === 'dark'\n                                                            ? '#fff'\n                                                            : '#000',\n                                                }}\n                                            />\n                                        ) : null}\n                                    </div>\n                                </Tooltip>\n                            ))}\n                        </div>\n                    ))}\n                </React.Fragment>\n            </Popover>\n        </React.Fragment>\n    );\n}\n\nColorSelectorControl.propTypes = {\n    selectedColor: PropTypes.object,\n    onSelectColor: PropTypes.func.isRequired,\n    colors: PropTypes.array.isRequired,\n    colorsPerRow: PropTypes.number,\n    children: PropTypes.any,\n};\n\nexport default ColorSelectorControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ColorSelectorControl from '../core/ColorSelectorControl';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport {\n    getCurrentMappedInlineStyle,\n    toggleMappedInlineStyle,\n} from '../../../utils/editorStateUtils';\n\nfunction ToggleInlineStyleColorSelectorControl({\n    configuration,\n    defaultConfiguration,\n    pluginData,\n    colorCssProp,\n    inlineStyle,\n    text,\n    children,\n}) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [selectedColor, setSelectedColor] = React.useState(null);\n    const options = configuration.options || defaultConfiguration.options;\n\n    React.useEffect(() => {\n        const selectededInlineStyle = getCurrentMappedInlineStyle(\n            editor.editorState,\n            Object.keys(pluginData.customStyleMap),\n            null\n        );\n        setSelectedColor(\n            selectededInlineStyle && pluginData.customStyleMap[selectededInlineStyle]\n                ? {\n                      color: pluginData.customStyleMap[selectededInlineStyle][colorCssProp],\n                      value: selectededInlineStyle,\n                  }\n                : null\n        );\n    }, [editor.editorState, pluginData.customStyleMap, colorCssProp]);\n\n    const handleSelectColor = (selectedColorData) => {\n        setSelectedColor(selectedColorData);\n        const newEditorState = toggleMappedInlineStyle(\n            editor.editorState,\n            Object.keys(pluginData.customStyleMap),\n            selectedColorData ? selectedColorData.value : ''\n        );\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <ColorSelectorControl\n            text={text}\n            onSelectColor={handleSelectColor}\n            selectedColor={selectedColor}\n            colorsPerRow={configuration.colorsPerRow || defaultConfiguration.colorsPerRow}\n            disabled={editor.editorState.getSelection().isCollapsed()}\n            colors={options.map((option) => ({\n                text: option.text,\n                color: option.value,\n                value: `${inlineStyle}-${option.value}`,\n            }))}>\n            {children}\n        </ColorSelectorControl>\n    );\n}\n\nToggleInlineStyleColorSelectorControl.propTypes = {\n    configuration: PropTypes.object,\n    defaultConfiguration: PropTypes.object.isRequired,\n    pluginData: PropTypes.object.isRequired,\n    colorCssProp: PropTypes.string.isRequired,\n    inlineStyle: PropTypes.string.isRequired,\n    text: PropTypes.string,\n    children: PropTypes.any,\n};\n\nexport default ToggleInlineStyleColorSelectorControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport FormatColorTextIcon from '@mui/icons-material/FormatColorText';\nimport inlineStyles from '../../../types/inlineStyles';\nimport ToggleInlineStyleColorSelectorControl from '../core/ToggleInlineStyleColorSelectorControl';\n\nfunction FontColorControl({ configuration, defaultConfiguration, pluginData }) {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleColorSelectorControl\n            text={editor.translate('controls.fontColor.title')}\n            configuration={configuration}\n            defaultConfiguration={defaultConfiguration}\n            inlineStyle={inlineStyles.FONT_COLOR}\n            pluginData={pluginData}\n            colorCssProp=\"color\">\n            <FormatColorTextIcon />\n        </ToggleInlineStyleColorSelectorControl>\n    );\n}\n\nFontColorControl.propTypes = {\n    configuration: PropTypes.object,\n    defaultConfiguration: PropTypes.object.isRequired,\n    pluginData: PropTypes.object.isRequired,\n};\n\nexport default FontColorControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport inlineStyles from '../../../types/inlineStyles';\nimport ToggleInlineStyleColorSelectorControl from '../core/ToggleInlineStyleColorSelectorControl';\n\nfunction FontBackgroundColorControl({ configuration, defaultConfiguration, pluginData }) {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleColorSelectorControl\n            text={editor.translate('controls.fontBackgroundColor.title')}\n            configuration={configuration}\n            defaultConfiguration={defaultConfiguration}\n            inlineStyle={inlineStyles.FONT_BACKGROUND}\n            pluginData={pluginData}\n            colorCssProp=\"backgroundColor\">\n            <BorderColorIcon />\n        </ToggleInlineStyleColorSelectorControl>\n    );\n}\n\nFontBackgroundColorControl.propTypes = {\n    configuration: PropTypes.object,\n    defaultConfiguration: PropTypes.object.isRequired,\n    pluginData: PropTypes.object.isRequired,\n};\n\nexport default FontBackgroundColorControl;\n","import inlineStyles from '../../../types/inlineStyles';\n\nconst fontBackgroundColorPlugin = (configuration, defaultConfiguration) => {\n    const fontBgs = configuration.options || defaultConfiguration.options;\n    const customStyleMap = {};\n    for (const fontBg of fontBgs) {\n        customStyleMap[`${inlineStyles.FONT_BACKGROUND}-${fontBg.value}`] = {\n            backgroundColor: fontBg.value,\n        };\n    }\n    return { customStyleMap };\n};\n\nexport default fontBackgroundColorPlugin;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    imgWrapper: {\n        maxWidth: '100%',\n        maxHeight: 300,\n        overflow: 'auto',\n        marginTop: 2,//theme.spacing(2),\n        marginBottom: 2//theme.spacing(2),\n    },\n}));\n\nfunction ImageToUpload({ width, height, src }) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.imgWrapper}>\n            <img alt=\"\" width={width} height={height} src={src} />\n        </div>\n    );\n}\n\nImageToUpload.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    src: PropTypes.string.isRequired,\n};\n\nexport default ImageToUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../../../hooks/useEditor';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\nimport LockIcon from '@mui/icons-material/Lock';\n\nfunction SizeInputs({\n    originalWidth,\n    originalHeight,\n    width,\n    height,\n    onChangeWidth,\n    onChangeHeight,\n}) {\n    const editor = useEditor();\n    const [maintainAspectRatio, setMaintainAspectRatio] = React.useState(true);\n    const aspectRatio = originalWidth / originalHeight;\n\n    const handleChangeWidth = (ev) => {\n        ev.stopPropagation();\n        const value = ev.currentTarget.value;\n        const w = value === '' || isNaN(value) ? 0 : parseInt(value);\n        onChangeWidth(w);\n        if (maintainAspectRatio) {\n            onChangeHeight(Math.round(w / aspectRatio));\n        }\n    };\n\n    const handleChangeHeight = (ev) => {\n        ev.stopPropagation();\n        const value = ev.currentTarget.value;\n        const h = value === '' || isNaN(value) ? 0 : parseInt(value);\n        onChangeHeight(h);\n        if (maintainAspectRatio) {\n            onChangeWidth(Math.round(h * aspectRatio));\n        }\n    };\n\n    const handleClickAspectRatio = () => {\n        const newMaintainAspectRatio = !maintainAspectRatio;\n        setMaintainAspectRatio(newMaintainAspectRatio);\n        if (newMaintainAspectRatio) {\n            onChangeHeight(Math.round(width / aspectRatio));\n        }\n    };\n\n    return (\n        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\" spacing={2}>\n            <Grid item>\n                <TextField\n                    type=\"number\"\n                    label={editor.translate('controls.image.labels.width')}\n                    size=\"small\"\n                    value={width}\n                    onChange={handleChangeWidth}\n                    onClick={(ev) => ev.stopPropagation()}\n                    style={{ maxWidth: 90 }}\n                />\n            </Grid>\n            <Grid item>\n                <IconButton onClick={handleClickAspectRatio} size=\"small\">\n                    {maintainAspectRatio ? <LockIcon /> : <LockOpenIcon />}\n                </IconButton>\n            </Grid>\n            <Grid item>\n                <TextField\n                    type=\"number\"\n                    label={editor.translate('controls.image.labels.height')}\n                    size=\"small\"\n                    value={height}\n                    onChange={handleChangeHeight}\n                    onClick={(ev) => ev.stopPropagation()}\n                    style={{ maxWidth: 90 }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\nSizeInputs.propTypes = {\n    originalWidth: PropTypes.number.isRequired,\n    originalHeight: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    onChangeWidth: PropTypes.func.isRequired,\n    onChangeHeight: PropTypes.func.isRequired,\n};\n\nexport default SizeInputs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../../hooks/useEditor';\nimport DialogContent from '@mui/material/DialogContent';\nimport TextField from '@mui/material/TextField';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport ImageToUpload from './image/ImageToUpload';\nimport SizeInputs from './inputs/SizeInputs';\n\nfunction ByUrlDialog({ open, onClose, onSubmit }) {\n    const editor = useEditor();\n    const [imageURL, setImageURL] = React.useState('');\n    const [imageWidth, setImageWidth] = React.useState(0);\n    const [imageOriginalWidth, setImageOriginalWidth] = React.useState(0);\n    const [imageHeight, setImageHeight] = React.useState(0);\n    const [imageOriginalHeight, setImageOriginalHeight] = React.useState(0);\n    const [isUploading, setIsUploading] = React.useState(false);\n    const [isValidImage, setIsValidImage] = React.useState(false);\n    const [hasError, setHasError] = React.useState(false);\n    const [changeTimeout, setChangeTimeout] = React.useState(null);\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        onSubmit({ imageURL, imageWidth, imageHeight });\n    };\n\n    const resetForm = () => {\n        setIsValidImage(false);\n        setImageURL('');\n    };\n\n    const handleURLChange = (url) => {\n        setImageURL(url);\n        if (changeTimeout) {\n            clearTimeout(changeTimeout);\n            setChangeTimeout(null);\n        }\n\n        if (url === '') {\n            setHasError(false);\n            setIsValidImage(false);\n            return;\n        }\n\n        const to = setTimeout(() => {\n            setIsUploading(true);\n            // eslint-disable-next-line no-undef\n            const image = new Image();\n            image.onload = function () {\n                setImageWidth(this.width);\n                setImageOriginalWidth(this.width);\n                setImageHeight(this.height);\n                setImageOriginalHeight(this.height);\n                setIsUploading(false);\n                setIsValidImage(true);\n                setHasError(false);\n            };\n            image.onerror = function () {\n                setIsUploading(false);\n                setIsValidImage(false);\n                setHasError(true);\n            };\n            image.src = url;\n            setChangeTimeout(null);\n        }, 1000);\n        setChangeTimeout(to);\n    };\n\n    let content = null;\n\n    if (isUploading) content = <CircularProgress />;\n    else if (isValidImage && imageURL)\n        content = <ImageToUpload src={imageURL} height={imageHeight} width={imageWidth} />;\n    else if (hasError && !isValidImage && imageURL)\n        content = (\n            <Typography variant=\"subtitle1\" color=\"error\" gutterBottom>\n                {editor.translate('controls.image.errorMessages.notValidImage')}\n            </Typography>\n        );\n\n    return (\n        <Dialog open={open} onClose={onClose} onEnter={resetForm}>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    {isValidImage && imageURL !== '' && (\n                        <SizeInputs\n                            width={imageWidth}\n                            onChangeHeight={setImageHeight}\n                            height={imageHeight}\n                            originalWidth={imageOriginalWidth}\n                            originalHeight={imageOriginalHeight}\n                            onChangeWidth={setImageWidth}\n                        />\n                    )}\n                    <Grid container alignItems=\"center\" justify=\"center\">\n                        {content}\n                    </Grid>\n                    <TextField\n                        autoFocus\n                        label={editor.translate('controls.image.labels.url')}\n                        value={imageURL}\n                        onChange={(ev) => handleURLChange(ev.currentTarget.value)}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"button\" onClick={onClose} color=\"primary\">\n                        {editor.translate('controls.image.actions.cancel')}\n                    </Button>\n                    <Button type=\"submit\" color=\"primary\" disabled={!isValidImage}>\n                        {editor.translate('controls.image.actions.add')}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n}\n\nByUrlDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ByUrlDialog;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../../hooks/useEditor';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport SizeInputs from './inputs/SizeInputs';\nimport ImageToUpload from './image/ImageToUpload';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    dropArea: ({ highlightDropArea }) => ({\n        width: 500,\n        height: 300,\n        boxSizing: 'border-box',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 2,//theme.spacing(2),\n        marginTop: 1,//theme.spacing(1),\n        marginBottom: 2,//theme.spacing(2),\n        borderRadius: 4,//theme.shape.borderRadius || 4,\n        backgroundColor: highlightDropArea\n            ? '#bdbdbd'\n            : '#eeeeee',\n        // ? theme.palette.grey[400] || '#bdbdbd'\n        // : theme.palette.grey[200] || '#eeeeee',\n        border: highlightDropArea\n            ? 'solid 3px #757575'\n            : 'dashed 3px #bdbdbd',\n        // ? `solid 3px ${theme.palette.grey[600] || '#757575'}`\n        // : `dashed 3px ${theme.palette.grey[400] || '#bdbdbd'}`,\n        color: 'rgba(0, 0, 0, 0.38)',//theme.palette.text.hint || 'rgba(0, 0, 0, 0.38)',\n        cursor: 'pointer',\n    }),\n}));\n\nfunction UploadDialog({ open, onClose, onSubmit, uploadCallback }) {\n    const editor = useEditor();\n    const [imageURL, setImageURL] = React.useState('');\n    const [imageWidth, setImageWidth] = React.useState(0);\n    const [imageOriginalWidth, setImageOriginalWidth] = React.useState(0);\n    const [imageHeight, setImageHeight] = React.useState(0);\n    const [imageOriginalHeight, setImageOriginalHeight] = React.useState(0);\n    const [isUploading, setIsUploading] = React.useState(false);\n    const [isValidImage, setIsValidImage] = React.useState(false);\n    const [hasError, setHasError] = React.useState(false);\n    const [errorMessage, setErrorMessage] = React.useState(null);\n    const [highlightDropArea, setHighlightDropArea] = React.useState(false);\n    const inputFileRef = React.createRef();\n    const classes = useStyles({ highlightDropArea });\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        onSubmit({ imageURL, imageWidth, imageHeight });\n    };\n\n    const handleClickDropArea = (ev) => {\n        ev.preventDefault();\n        inputFileRef.current.click();\n    };\n\n    const handleDragEnter = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        setHighlightDropArea(true);\n    };\n\n    const handleDragLeave = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        setHighlightDropArea(false);\n    };\n\n    const handleDragOver = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        setHighlightDropArea(true);\n    };\n\n    const handleDrop = async (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const files = ev.dataTransfer.files;\n        if (files.length > 0) await onSelectFile(files[0]);\n    };\n\n    const handleInputFileChange = async () => {\n        const files = inputFileRef.current.files;\n        if (files.length > 0) await onSelectFile(files[0]);\n    };\n\n    const onSelectFile = async (file) => {\n        setHighlightDropArea(false);\n        setIsUploading(true);\n        try {\n            const selectedImageUrl = await uploadCallback(file);\n            setImageURL(selectedImageUrl);\n            const image = new Image();\n            image.onload = function () {\n                setImageWidth(this.width);\n                setImageOriginalWidth(this.width);\n                setImageHeight(this.height);\n                setImageOriginalHeight(this.height);\n                setIsUploading(false);\n                setIsValidImage(true);\n                setHasError(false);\n            };\n            image.onerror = function () {\n                setIsUploading(false);\n                setIsValidImage(false);\n                setHasError(true);\n                setErrorMessage(null);\n            };\n            image.src = selectedImageUrl;\n        } catch (e) {\n            setIsUploading(false);\n            setIsValidImage(false);\n            setHasError(true);\n            setErrorMessage(e);\n        }\n    };\n\n    const resetForm = () => {\n        setImageURL('');\n        setIsValidImage(false);\n        setIsUploading(false);\n        setHighlightDropArea(false);\n    };\n\n    let dropAreaContent = (\n        <Typography variant=\"subtitle1\">\n            {editor.translate('controls.image.labels.dropImageHere')}\n        </Typography>\n    );\n\n    if (isUploading) {\n        dropAreaContent = <CircularProgress />;\n    } else if (isValidImage && imageURL) {\n        dropAreaContent = <ImageToUpload src={imageURL} height={imageHeight} width={imageWidth} />;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} onEnter={resetForm}>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <input\n                        ref={inputFileRef}\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleInputFileChange}\n                        style={{ display: 'none' }}\n                    />\n                    {isValidImage && imageURL !== '' && (\n                        <SizeInputs\n                            originalWidth={imageOriginalWidth}\n                            originalHeight={imageOriginalHeight}\n                            width={imageWidth}\n                            height={imageHeight}\n                            onChangeWidth={setImageWidth}\n                            onChangeHeight={setImageHeight}\n                        />\n                    )}\n\n                    {hasError && !isValidImage && (\n                        <Typography variant=\"subtitle1\" color=\"error\" align=\"center\" gutterBottom>\n                            {errorMessage !== null\n                                ? errorMessage\n                                : editor.translate('controls.image.errorMessages.notValidImage')}\n                        </Typography>\n                    )}\n\n                    <div\n                        className={classes.dropArea}\n                        onClick={handleClickDropArea}\n                        onDragEnter={handleDragEnter}\n                        onDragLeave={handleDragLeave}\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}>\n                        {dropAreaContent}\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"button\" onClick={onClose} color=\"primary\">\n                        {editor.translate('controls.image.actions.cancel')}\n                    </Button>\n                    <Button type=\"submit\" color=\"primary\" disabled={!isValidImage}>\n                        {editor.translate('controls.image.actions.add')}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n}\n\nUploadDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    uploadCallback: PropTypes.func.isRequired,\n};\n\nexport default UploadDialog;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../../hooks/useEditor';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport SizeInputs from './inputs/SizeInputs';\nimport DialogActions from '@mui/material/DialogActions';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport ImageToUpload from './image/ImageToUpload';\n\nfunction ResizeImageDialog({ open, onClose, src, originalWidth, originalHeight, onSave }) {\n    const [width, setWidth] = React.useState(0);\n    const [height, setHeight] = React.useState(0);\n    const editor = useEditor();\n\n    React.useEffect(() => {\n        setWidth(originalWidth);\n        setHeight(originalHeight);\n    }, [originalWidth, originalHeight]);\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        onSave(width, height);\n    };\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <SizeInputs\n                        width={width}\n                        height={height}\n                        onChangeWidth={setWidth}\n                        onChangeHeight={setHeight}\n                        originalWidth={originalWidth}\n                        originalHeight={originalHeight}\n                    />\n                    <Grid container alignItems=\"center\" justify=\"center\">\n                        <ImageToUpload src={src} width={width} height={height} />\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"button\" onClick={() => onClose()}>\n                        {editor.translate('controls.image.actions.cancel')}\n                    </Button>\n                    <Button type=\"submit\">\n                        {editor.translate('controls.image.actions.resize')}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n}\n\nResizeImageDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    src: PropTypes.string.isRequired,\n    originalWidth: PropTypes.number.isRequired,\n    originalHeight: PropTypes.number.isRequired,\n    onSave: PropTypes.func.isRequired,\n};\n\nexport default ResizeImageDialog;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport ButtonControl from '../core/ButtonControl';\nimport ImageIcon from '@mui/icons-material/Image';\nimport Popover from '@mui/material/Popover';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport PublishIcon from '@mui/icons-material/Publish';\nimport LinkIcon from '@mui/icons-material/Link';\nimport entities from '../../../types/entities';\nimport { EditorState, AtomicBlockUtils } from 'draft-js';\nimport ByUrlDialog from './dialogs/ByURLDialog';\nimport UploadDialog from './dialogs/UploadDialog';\nimport ResizeImageDialog from './dialogs/ResizeImageDialog';\n\nfunction ImageControl({ configuration, defaultConfiguration }) {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const menuId = Math.random().toString(36).substring(8);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [isUploadDialogOpened, setIsUploadDialogOpened] = React.useState(false);\n    const [isUrlDialogOpened, setIsUrlDialogOpened] = React.useState(false);\n    const uploadCallback = configuration.uploadCallback || defaultConfiguration.uploadCallback;\n\n    const imageEntityToResize = editor.resizeImageEntityKey\n        ? editor.editorState.getCurrentContent().getEntity(editor.resizeImageEntityKey)\n        : null;\n\n    const handleSubmitImage = ({ imageURL, imageWidth, imageHeight }) => {\n        if (imageURL === '') return;\n        setIsUrlDialogOpened(false);\n        setIsUploadDialogOpened(false);\n\n        const contentState = editor.editorState.getCurrentContent();\n        const contentStateWithEntity = contentState.createEntity(entities.IMAGE, 'IMMUTABLE', {\n            src: imageURL,\n            width: imageWidth,\n            height: imageHeight,\n        });\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n        const newEditorState = EditorState.push(\n            editor.editorState,\n            contentStateWithEntity,\n            'apply-entity'\n        );\n        editor.onChange(AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' '));\n        editorFocus();\n    };\n\n    const handleResizeImage = (width, height) => {\n        editor.hideResizeImageDialog();\n        const contentState = editor.editorState.getCurrentContent();\n        const newEditorState = EditorState.push(\n            editor.editorState,\n            contentState.mergeEntityData(editor.resizeImageEntityKey, { width, height }),\n            'apply-entity'\n        );\n        editor.onChange(newEditorState);\n        editorFocus();\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonControl\n                onClick={(ev) => setAnchorEl(ev.currentTarget)}\n                text={editor.translate('controls.image.title')}\n                aria-controls={menuId}\n                aria-haspopup=\"true\">\n                <ImageIcon />\n            </ButtonControl>\n\n            <Popover\n                id={menuId}\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                }}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={() => setAnchorEl(null)}>\n                <List\n                    component=\"nav\"\n                    aria-label={editor.translate('controls.image.labels.insertOptions')}>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            setIsUploadDialogOpened(true);\n                            setAnchorEl(null);\n                        }}>\n                        <ListItemIcon>\n                            <PublishIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={editor.translate('controls.image.actions.upload')} />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            setIsUrlDialogOpened(true);\n                            setAnchorEl(null);\n                        }}>\n                        <ListItemIcon>\n                            <LinkIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={editor.translate('controls.image.actions.url')} />\n                    </ListItem>\n                </List>\n            </Popover>\n\n            <ByUrlDialog\n                onSubmit={handleSubmitImage}\n                onClose={() => setIsUrlDialogOpened(false)}\n                open={isUrlDialogOpened}\n            />\n\n            <UploadDialog\n                onSubmit={handleSubmitImage}\n                onClose={() => setIsUploadDialogOpened(false)}\n                open={isUploadDialogOpened}\n                uploadCallback={uploadCallback}\n            />\n\n            <ResizeImageDialog\n                open={editor.isResizeImageDialogVisible}\n                onClose={() => editor.hideResizeImageDialog()}\n                src={imageEntityToResize ? imageEntityToResize.getData().src : ''}\n                originalWidth={imageEntityToResize ? imageEntityToResize.getData().width : 0}\n                originalHeight={imageEntityToResize ? imageEntityToResize.getData().height : 0}\n                onSave={handleResizeImage}\n            />\n        </React.Fragment>\n    );\n}\n\nImageControl.propTypes = {\n    configuration: PropTypes.object.isRequired,\n    defaultConfiguration: PropTypes.object.isRequired,\n};\n\nexport default ImageControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport entities from '../../../types/entities';\nimport blockStyles from '../../../types/blockStyles';\nimport { EditorState, Modifier, SelectionState } from 'draft-js';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport Popover from '@mui/material/Popover';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport ImageIcon from '@mui/icons-material/Image';\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft';\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport PhotoSizeSelectLargeIcon from '@mui/icons-material/PhotoSizeSelectLarge';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { makeStyles } from '@mui/styles';\nimport Typography from '@mui/material/Typography';\n\nconst EditorMedia = ({ contentState, block }) => {\n    const entity = contentState.getEntity(block.getEntityAt(0));\n    const type = entity.getType();\n\n    if (type === entities.IMAGE) {\n        const { src, width = 'auto', height = 'auto' } = entity.getData();\n        return (\n            <EditorImage\n                src={src}\n                width={width}\n                height={height}\n                block={block}\n                contentState={contentState}\n            />\n        );\n    }\n\n    return null;\n};\n\nEditorMedia.propTypes = {\n    contentState: PropTypes.object.isRequired,\n    block: PropTypes.object.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    imgInfo: {\n        padding: 0.6//theme.spacing(0.6),\n    },\n}));\n\nconst EditorImage = ({ src, width, height, contentState, block }) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [infoAnchorEl, setInfoAnchorEl] = React.useState(null);\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const classes = useStyles();\n\n    const showOptions = (ev) => {\n        setAnchorEl(ev.currentTarget);\n        setInfoAnchorEl(ev.currentTarget);\n    };\n\n    const hideOptions = () => {\n        setAnchorEl(null);\n        setInfoAnchorEl(null);\n    };\n\n    const imageAlign = (ev, align) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const imageSelection = SelectionState.createEmpty(block.getKey()).merge({\n            anchorKey: block.getKey(),\n            anchorOffset: 0,\n            focusKey: block.getKey(),\n            focusOffset: block.getLength(),\n        });\n\n        const newContentState = Modifier.setBlockData(contentState, imageSelection, {\n            textAlign: align,\n        });\n        editor.onChange(EditorState.push(editor.editorState, newContentState, 'change-block-data'));\n        editorFocus();\n    };\n\n    const removeImage = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const imageSelection = SelectionState.createEmpty(block.getKey()).merge({\n            anchorKey: block.getKey(),\n            anchorOffset: 0,\n            focusKey: block.getKey(),\n            focusOffset: block.getLength(),\n        });\n\n        let newContentState = Modifier.removeRange(contentState, imageSelection, 'forward');\n\n        const blockMap = newContentState.getBlockMap().delete(block.getKey());\n\n        const firstBlock = newContentState.getFirstBlock();\n\n        const selectionToStart = SelectionState.createEmpty(firstBlock.getKey()).merge({\n            anchorKey: firstBlock.getKey(),\n            anchorOffset: 0,\n            focusKey: firstBlock.getKey(),\n            focusOffset: 0,\n        });\n\n        newContentState = newContentState.merge({ blockMap, selectionAfter: selectionToStart });\n\n        editor.onChange(EditorState.push(editor.editorState, newContentState, 'remove-range'));\n        editorFocus();\n    };\n\n    if (!src) return null;\n\n    return (\n        <React.Fragment>\n            <img alt={src} src={src} width={width} height={height} onClick={showOptions} />\n            <Popover\n                open={Boolean(infoAnchorEl)}\n                onClose={hideOptions}\n                anchorEl={infoAnchorEl}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}>\n                <Typography color=\"textSecondary\" variant=\"body1\" className={classes.imgInfo}>\n                    {width}&nbsp;x&nbsp;{height}\n                </Typography>\n            </Popover>\n            <Popover\n                open={Boolean(anchorEl)}\n                onClose={hideOptions}\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}>\n                <ButtonGroup\n                    size=\"small\"\n                    aria-label={editor.translate('controls.image.labels.editOptions')}>\n                    <Button\n                        onClick={(ev) => imageAlign(ev, 'left')}\n                        title={editor.translate('controls.image.actions.alignLeft')}>\n                        <ArrowLeftIcon />\n                        <ImageIcon />\n                    </Button>\n                    <Button\n                        onClick={(ev) => imageAlign(ev, 'center')}\n                        title={editor.translate('controls.image.actions.alignCenter')}>\n                        <ArrowLeftIcon />\n                        <ImageIcon />\n                        <ArrowRightIcon />\n                    </Button>\n                    <Button\n                        onClick={(ev) => imageAlign(ev, 'right')}\n                        title={editor.translate('controls.image.actions.alignRight')}>\n                        <ImageIcon />\n                        <ArrowRightIcon />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            hideOptions();\n                            editor.showResizeImageDialog(block.getEntityAt(0));\n                        }}\n                        title={editor.translate('controls.image.actions.resize')}>\n                        <PhotoSizeSelectLargeIcon />\n                    </Button>\n                    <Button\n                        onClick={removeImage}\n                        title={editor.translate('controls.image.actions.remove')}>\n                        <DeleteIcon />\n                    </Button>\n                </ButtonGroup>\n            </Popover>\n        </React.Fragment>\n    );\n};\n\nEditorImage.propTypes = {\n    src: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    contentState: PropTypes.object.isRequired,\n    block: PropTypes.object.isRequired,\n};\n\nconst imagePlugin = () => ({\n    blockRendererFn: (block) => {\n        if (block.getType() === blockStyles.ATOMIC) {\n            return {\n                component: EditorMedia,\n                editable: false,\n            };\n        }\n    },\n});\n\nexport default imagePlugin;\n","import DividerControl from '../EditorToolbar/controls/DividerControl';\nimport UndoControl from '../EditorToolbar/controls/UndoControl';\nimport RedoControl from '../EditorToolbar/controls/RedoControl';\nimport BoldControl from '../EditorToolbar/controls/BoldControl';\nimport ItalicControl from '../EditorToolbar/controls/ItalicControl';\nimport UnderlineControl from '../EditorToolbar/controls/UnderlineControl';\nimport StrikethroughControl from '../EditorToolbar/controls/StrikethroughControl';\nimport LinkAddControl from '../EditorToolbar/controls/LinkAddControl';\nimport linkAddPlugin from '../EditorToolbar/controls/LinkAddControl/plugin';\nimport LinkRemoveControl from '../EditorToolbar/controls/LinkRemoveControl';\nimport BlockTypeControl from '../EditorToolbar/controls/BlockTypeControl';\nimport UnorderedListControl from '../EditorToolbar/controls/UnorderedListControl';\nimport OrderedListControl from '../EditorToolbar/controls/OrderedListControl';\nimport FontFamilyControl from '../EditorToolbar/controls/FontFamilyControl';\nimport fontFamilyPlugin from '../EditorToolbar/controls/FontFamilyControl/plugin';\nimport TextAlignControl from '../EditorToolbar/controls/TextAlignControl';\nimport textAlignPlugin from '../EditorToolbar/controls/TextAlignControl/plugin';\nimport FontSizeControl from '../EditorToolbar/controls/FontSizeControl';\nimport fontSizePlugin from '../EditorToolbar/controls/FontSizeControl/plugin';\nimport FontColorControl from '../EditorToolbar/controls/FontColorControl';\nimport fontColorPlugin from '../EditorToolbar/controls/FontColorControl/plugin';\nimport FontBackgroundColorControl from '../EditorToolbar/controls/FontBackgroundColorControl';\nimport fontBackgroundColorPlugin from '../EditorToolbar/controls/FontBackgroundColorControl/plugin';\nimport ImageControl from '../EditorToolbar/controls/ImageControl';\nimport imagePlugin from '../EditorToolbar/controls/ImageControl/plugin';\nimport { fileToBase64 } from '../utils/fileUtils';\nimport { LANG_PREFIX } from './lang';\n\nexport const toolbarControlTypes = {\n    divider: {\n        name: 'divider',\n        component: DividerControl,\n    },\n    undo: {\n        name: 'undo',\n        component: UndoControl,\n    },\n    redo: {\n        name: 'undo',\n        component: RedoControl,\n    },\n    bold: {\n        name: 'bold',\n        component: BoldControl,\n    },\n    italic: {\n        name: 'italic',\n        component: ItalicControl,\n    },\n    underline: {\n        name: 'underline',\n        component: UnderlineControl,\n    },\n    strikethrough: {\n        name: 'strikethrough',\n        component: StrikethroughControl,\n    },\n    fontColor: {\n        name: 'fontColor',\n        component: FontColorControl,\n        plugin: fontColorPlugin,\n    },\n    fontBackgroundColor: {\n        name: 'fontBackgroundColor',\n        component: FontBackgroundColorControl,\n        plugin: fontBackgroundColorPlugin,\n    },\n    linkAdd: {\n        name: 'linkAdd',\n        component: LinkAddControl,\n        plugin: linkAddPlugin,\n    },\n    linkRemove: {\n        name: 'linkRemove',\n        component: LinkRemoveControl,\n    },\n    image: {\n        name: 'image',\n        component: ImageControl,\n        plugin: imagePlugin,\n    },\n    blockType: {\n        name: 'blockType',\n        component: BlockTypeControl,\n    },\n    fontSize: {\n        name: 'fontSize',\n        component: FontSizeControl,\n        plugin: fontSizePlugin,\n    },\n    fontFamily: {\n        name: 'fontFamily',\n        component: FontFamilyControl,\n        plugin: fontFamilyPlugin,\n    },\n    textAlign: {\n        name: 'textAlign',\n        component: TextAlignControl,\n        plugin: textAlignPlugin,\n    },\n    unorderedList: {\n        name: 'unorderedList',\n        component: UnorderedListControl,\n    },\n    orderedList: {\n        name: 'orderedList',\n        component: OrderedListControl,\n    },\n};\n\nexport const defaultToolbarControls = [\n    toolbarControlTypes.undo,\n    toolbarControlTypes.redo,\n    toolbarControlTypes.divider,\n    toolbarControlTypes.bold,\n    toolbarControlTypes.italic,\n    toolbarControlTypes.underline,\n    toolbarControlTypes.strikethrough,\n    toolbarControlTypes.fontColor,\n    toolbarControlTypes.fontBackgroundColor,\n    toolbarControlTypes.divider,\n    toolbarControlTypes.linkAdd,\n    toolbarControlTypes.linkRemove,\n    toolbarControlTypes.image,\n    toolbarControlTypes.divider,\n    toolbarControlTypes.blockType,\n    toolbarControlTypes.fontSize,\n    toolbarControlTypes.fontFamily,\n    toolbarControlTypes.textAlign,\n    toolbarControlTypes.divider,\n    toolbarControlTypes.unorderedList,\n    toolbarControlTypes.orderedList,\n];\n\nconst colors = [\n    { text: 'black', value: 'rgb(0, 0, 0)' },\n    { text: 'dark grey 4', value: 'rgb(67, 67, 67)' },\n    { text: 'dark grey 3', value: 'rgb(102, 102, 102)' },\n    { text: 'dark grey 2', value: 'rgb(153, 153, 153)' },\n    { text: 'dark grey 1', value: 'rgb(183, 183, 183)' },\n    { text: 'grey', value: 'rgb(204, 204, 204)' },\n    { text: 'light grey 1', value: 'rgb(217, 217, 217)' },\n    { text: 'light grey 2', value: 'rgb(239, 239, 239)' },\n    { text: 'light grey 3', value: 'rgb(243, 243, 243)' },\n    { text: 'white', value: 'rgb(255, 255, 255)' },\n    { text: 'Red berry', value: 'rgb(152, 0, 0)' },\n    { text: 'red', value: 'rgb(255, 0, 0)' },\n    { text: 'orange', value: 'rgb(255, 153, 0)' },\n    { text: 'yellow', value: 'rgb(255, 255, 0)' },\n    { text: 'green', value: 'rgb(0, 255, 0)' },\n    { text: 'cyan', value: 'rgb(0, 255, 255)' },\n    { text: 'cornflower blue', value: 'rgb(74, 134, 232)' },\n    { text: 'blue', value: 'rgb(0, 0, 255)' },\n    { text: 'purple', value: 'rgb(153, 0, 255)' },\n    { text: 'magenta', value: 'rgb(255, 0, 255)' },\n    { text: 'light red berry 3', value: 'rgb(230, 184, 175)' },\n    { text: 'light red 3', value: 'rgb(244, 204, 204)' },\n    { text: 'light orange 3', value: 'rgb(252, 229, 205)' },\n    { text: 'light yellow 3', value: 'rgb(255, 242, 204)' },\n    { text: 'light green 3', value: 'rgb(217, 234, 211)' },\n    { text: 'light cyan 3', value: 'rgb(208, 224, 227)' },\n    { text: 'light cornflower blue 3', value: 'rgb(201, 218, 248)' },\n    { text: 'light blue 3', value: 'rgb(207, 226, 243)' },\n    { text: 'light purple 3', value: 'rgb(217, 210, 233)' },\n    { text: 'light magenta 3', value: 'rgb(234, 209, 220)' },\n    { text: 'light red berry 2', value: 'rgb(221, 126, 107)' },\n    { text: 'light red 2', value: 'rgb(234, 153, 153)' },\n    { text: 'light orange 2', value: 'rgb(249, 203, 156)' },\n    { text: 'light yellow 2', value: 'rgb(255, 229, 153)' },\n    { text: 'light green 2', value: 'rgb(182, 215, 168)' },\n    { text: 'light cyan 2', value: 'rgb(162, 196, 201)' },\n    { text: 'light cornflower blue 2', value: 'rgb(164, 194, 244)' },\n    { text: 'light blue 2', value: 'rgb(159, 197, 232)' },\n    { text: 'light purple 2', value: 'rgb(180, 167, 214)' },\n    { text: 'light magenta 2', value: 'rgb(213, 166, 189)' },\n    { text: 'light red berry 1', value: 'rgb(204, 65, 37)' },\n    { text: 'light red 1', value: 'rgb(224, 102, 102)' },\n    { text: 'light orange 1', value: 'rgb(246, 178, 107)' },\n    { text: 'light yellow 1', value: 'rgb(255, 217, 102)' },\n    { text: 'light green 1', value: 'rgb(147, 196, 125)' },\n    { text: 'light cyan 1', value: 'rgb(118, 165, 175)' },\n    { text: 'light cornflower blue 1', value: 'rgb(109, 158, 235)' },\n    { text: 'light blue 1', value: 'rgb(111, 168, 220)' },\n    { text: 'light purple 1', value: 'rgb(142, 124, 195)' },\n    { text: 'light magenta 1', value: 'rgb(194, 123, 160)' },\n    { text: 'dark red berry 1', value: 'rgb(166, 28, 0)' },\n    { text: 'dark red 1', value: 'rgb(204, 0, 0)' },\n    { text: 'dark orange 1', value: 'rgb(230, 145, 56)' },\n    { text: 'dark yellow 1', value: 'rgb(241, 194, 50)' },\n    { text: 'dark green 1', value: 'rgb(106, 168, 79)' },\n    { text: 'dark cyan 1', value: 'rgb(69, 129, 142)' },\n    { text: 'dark cornflower blue 1', value: 'rgb(60, 120, 216)' },\n    { text: 'dark blue 1', value: 'rgb(61, 133, 198)' },\n    { text: 'dark purple 1', value: 'rgb(103, 78, 167)' },\n    { text: 'dark magenta 1', value: 'rgb(166, 77, 121)' },\n    { text: 'dark red berry 2', value: 'rgb(133, 32, 12)' },\n    { text: 'dark red 2', value: 'rgb(153, 0, 0)' },\n    { text: 'dark orange 2', value: 'rgb(180, 95, 6)' },\n    { text: 'dark yellow 2', value: 'rgb(191, 144, 0)' },\n    { text: 'dark green 2', value: 'rgb(56, 118, 29)' },\n    { text: 'dark cyan 2', value: 'rgb(19, 79, 92)' },\n    { text: 'dark cornflower blue 2', value: 'rgb(17, 85, 204)' },\n    { text: 'dark blue 2', value: 'rgb(11, 83, 148)' },\n    { text: 'dark purple 2', value: 'rgb(53, 28, 117)' },\n    { text: 'dark magenta 2', value: 'rgb(116, 27, 71)' },\n    { text: 'dark red berry 3', value: 'rgb(91, 15, 0)' },\n    { text: 'dark red 3', value: 'rgb(102, 0, 0)' },\n    { text: 'dark orange 3', value: 'rgb(120, 63, 4)' },\n    { text: 'dark yellow 3', value: 'rgb(127, 96, 0)' },\n    { text: 'dark green 3', value: 'rgb(39, 78, 19)' },\n    { text: 'dark cyan 3', value: 'rgb(12, 52, 61)' },\n    { text: 'dark cornflower blue 3', value: 'rgb(28, 69, 135)' },\n    { text: 'dark blue 3', value: 'rgb(7, 55, 99)' },\n    { text: 'dark purple 3', value: 'rgb(32, 18, 77)' },\n    { text: 'dark magenta 3', value: 'rgb(76, 17, 48)' },\n];\n\nexport const defaultToolbarControlsConfiguration = {\n    blockType: {\n        options: [\n            {\n                value: 'default',\n                text: LANG_PREFIX + 'controls.blockType.labels.normal',\n            },\n            {\n                value: 'header-one',\n                text: LANG_PREFIX + 'controls.blockType.labels.header1',\n            },\n            {\n                value: 'header-two',\n                text: LANG_PREFIX + 'controls.blockType.labels.header2',\n            },\n            {\n                value: 'header-three',\n                text: LANG_PREFIX + 'controls.blockType.labels.header3',\n            },\n            {\n                value: 'header-four',\n                text: LANG_PREFIX + 'controls.blockType.labels.header4',\n            },\n            {\n                value: 'header-five',\n                text: LANG_PREFIX + 'controls.blockType.labels.header5',\n            },\n            {\n                value: 'header-six',\n                text: LANG_PREFIX + 'controls.blockType.labels.header6',\n            },\n        ],\n    },\n    image: {\n        uploadCallback: fileToBase64,\n    },\n    fontColor: {\n        colorsPerRow: 10,\n        options: colors,\n    },\n    fontBackgroundColor: {\n        colorsPerRow: 10,\n        options: colors,\n    },\n    fontSize: {\n        options: [\n            'default',\n            '8px',\n            '9px',\n            '10px',\n            '11px',\n            '12px',\n            '14px',\n            '18px',\n            '24px',\n            '30px',\n            '36px',\n            '48px',\n            '60px',\n            '72px',\n            '96px',\n        ],\n    },\n    fontFamily: {\n        options: [\n            'default',\n            'Arial',\n            'Verdana',\n            'Times New Roman',\n            'Georgia',\n            'Courier new',\n            'Lucida Console',\n        ],\n    },\n};\n","import React from 'react';\nimport Divider from '@mui/material/Divider';\n\nfunction DividerControl() {\n    return <Divider orientation=\"vertical\" flexItem />;\n}\n\nexport default DividerControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { EditorState } from 'draft-js';\nimport ButtonControl from '../core/ButtonControl';\nimport UndoIcon from '@mui/icons-material/Undo';\n\nfunction UndoControl() {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n\n    const onClick = () => {\n        editor.onChange(EditorState.undo(editor.editorState));\n        editorFocus();\n    };\n\n    return (\n        <ButtonControl onClick={onClick} text={editor.translate('controls.undo.title')}>\n            <UndoIcon />\n        </ButtonControl>\n    );\n}\n\nexport default UndoControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport { EditorState } from 'draft-js';\nimport ButtonControl from '../core/ButtonControl';\nimport RedoIcon from '@mui/icons-material/Redo';\n\nfunction RedoControl() {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n\n    const onClick = () => {\n        editor.onChange(EditorState.redo(editor.editorState));\n        editorFocus();\n    };\n\n    return (\n        <ButtonControl onClick={onClick} text={editor.translate('controls.redo.title')}>\n            <RedoIcon />\n        </ButtonControl>\n    );\n}\n\nexport default RedoControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleInlineStyleButtonControl from '../core/ToggleInlineStyleButtonControl';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport inlineStyles from '../../../types/inlineStyles';\n\nfunction BoldControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleButtonControl\n            inlineStyle={inlineStyles.BOLD}\n            text={editor.translate('controls.bold.title')}>\n            <FormatBoldIcon />\n        </ToggleInlineStyleButtonControl>\n    );\n}\n\nexport default BoldControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleInlineStyleButtonControl from '../core/ToggleInlineStyleButtonControl';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport inlineStyles from '../../../types/inlineStyles';\n\nfunction ItalicControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleButtonControl\n            inlineStyle={inlineStyles.ITALIC}\n            text={editor.translate('controls.italic.title')}>\n            <FormatItalicIcon />\n        </ToggleInlineStyleButtonControl>\n    );\n}\n\nexport default ItalicControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleInlineStyleButtonControl from '../core/ToggleInlineStyleButtonControl';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport inlineStyles from '../../../types/inlineStyles';\n\nfunction UnderlineControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleButtonControl\n            inlineStyle={inlineStyles.UNDERLINE}\n            text={editor.translate('controls.underline.title')}>\n            <FormatUnderlinedIcon />\n        </ToggleInlineStyleButtonControl>\n    );\n}\n\nexport default UnderlineControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleInlineStyleButtonControl from '../core/ToggleInlineStyleButtonControl';\nimport FormatStrikethroughIcon from '@mui/icons-material/FormatStrikethrough';\nimport inlineStyles from '../../../types/inlineStyles';\n\nfunction StrikethroughControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleInlineStyleButtonControl\n            inlineStyle={inlineStyles.STRIKETHROUGH}\n            text={editor.translate('controls.strikethrough.title')}>\n            <FormatStrikethroughIcon />\n        </ToggleInlineStyleButtonControl>\n    );\n}\n\nexport default StrikethroughControl;\n","import inlineStyles from '../../../types/inlineStyles';\n\nconst fontColorPlugin = (configuration, defaultConfiguration) => {\n    const fontColors = configuration.options || defaultConfiguration.options;\n    const customStyleMap = {};\n    for (const fontColor of fontColors) {\n        customStyleMap[`${inlineStyles.FONT_COLOR}-${fontColor.value}`] = {\n            color: fontColor.value,\n        };\n    }\n    return { customStyleMap };\n};\n\nexport default fontColorPlugin;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport useEditorFocus from '../../../hooks/useEditorFocus';\nimport ButtonControl from '../core/ButtonControl';\nimport LinkIcon from '@mui/icons-material/Link';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport TextField from '@mui/material/TextField';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport entities from '../../../types/entities';\nimport { applyEntityToCurrentSelection } from '../../../utils/editorStateUtils';\n\nfunction LinkAddControl() {\n    const editor = useEditor();\n    const editorFocus = useEditorFocus();\n    const [isDialogOpened, setIsDialogOpened] = React.useState(false);\n    const [link, setLink] = React.useState('');\n    const formRef = React.createRef();\n\n    const onClick = () => {\n        setLink('');\n        setIsDialogOpened(true);\n    };\n\n    const handleCloseDialog = () => {\n        setIsDialogOpened(false);\n    };\n\n    const onChangeLink = (ev) => {\n        setLink(ev.currentTarget.value);\n    };\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        if (link === '') return;\n        handleCloseDialog();\n        editor.onChange(\n            applyEntityToCurrentSelection(editor.editorState, entities.LINK, 'MUTABLE', {\n                url: link,\n            })\n        );\n        editorFocus();\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonControl\n                onClick={onClick}\n                text={editor.translate('controls.linkAdd.title')}\n                disabled={editor.editorState.getSelection().isCollapsed()}>\n                <LinkIcon />\n            </ButtonControl>\n            <Dialog open={isDialogOpened} onClose={handleCloseDialog}>\n                <form ref={formRef} onSubmit={handleSubmit}>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            label={editor.translate('controls.linkAdd.labels.link')}\n                            value={link}\n                            onChange={onChangeLink}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button type=\"button\" onClick={handleCloseDialog} color=\"primary\">\n                            {editor.translate('controls.linkAdd.actions.cancel')}\n                        </Button>\n                        <Button type=\"submit\" color=\"primary\" disabled={link === ''}>\n                            {editor.translate('controls.linkAdd.actions.add')}\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n\nexport default LinkAddControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport { RichUtils } from 'draft-js';\nimport ButtonControl from '../core/ButtonControl';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\n\nfunction LinkRemoveControl() {\n    const editor = useEditor();\n\n    const onClick = () => {\n        const selection = editor.editorState.getSelection();\n        editor.onChange(RichUtils.toggleLink(editor.editorState, selection, null));\n    };\n\n    return (\n        <ButtonControl\n            onClick={onClick}\n            text={editor.translate('controls.linkRemove.title')}\n            disabled={editor.editorState.getSelection().isCollapsed()}>\n            <LinkOffIcon />\n        </ButtonControl>\n    );\n}\n\nexport default LinkRemoveControl;\n","import inlineStyles from '../../../types/inlineStyles';\n\nconst fontFamilyPlugin = (configuration, defaultConfiguration) => {\n    const fontFamilies = configuration.options || defaultConfiguration.options;\n    const customStyleMap = {};\n    for (const fontFamily of fontFamilies) {\n        customStyleMap[`${inlineStyles.FONT_FAMILY}-${fontFamily}`] =\n            fontFamily === 'default'\n                ? {}\n                : {\n                      fontFamily,\n                  };\n    }\n    return { customStyleMap };\n};\n\nexport default fontFamilyPlugin;\n","const textAlignPlugin = () => ({\n    blockStyleFn: (block) => {\n        const textAlign = block.getData() ? block.getData().get('textAlign') : null;\n        if (textAlign) {\n            return `mui-editor-${textAlign}-aligned-block`;\n        }\n\n        return '';\n    },\n});\n\nexport default textAlignPlugin;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleBlockTypeButtonControl from '../core/ToggleBlockTypeButtonControl';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\n\nfunction UnorderedListControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleBlockTypeButtonControl\n            blockType=\"unordered-list-item\"\n            text={editor.translate('controls.unorderedList.title')}>\n            <FormatListBulletedIcon />\n        </ToggleBlockTypeButtonControl>\n    );\n}\n\nexport default UnorderedListControl;\n","import React from 'react';\nimport useEditor from '../../../hooks/useEditor';\nimport ToggleBlockTypeButtonControl from '../core/ToggleBlockTypeButtonControl';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport blockStyles from '../../../types/blockStyles';\n\nfunction OrderedListControl() {\n    const editor = useEditor();\n\n    return (\n        <ToggleBlockTypeButtonControl\n            blockType={blockStyles.OL}\n            text={editor.translate('controls.orderedList.title')}>\n            <FormatListNumberedIcon />\n        </ToggleBlockTypeButtonControl>\n    );\n}\n\nexport default OrderedListControl;\n","export const fileToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n        // eslint-disable-next-line no-undef\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(file);\n    });\n};\n","import { defaultToolbarControls, defaultToolbarControlsConfiguration } from './editorToolbar';\nimport Paper from '@mui/material/Paper';\n\nexport const defaultConfig = {\n    lang: 'en',\n    translations: {},\n    draftEditor: {},\n    editor: {\n        wrapperElement: Paper,\n        className: '',\n        style: {},\n    },\n    toolbar: {\n        className: '',\n        style: {},\n        visible: true,\n        position: 'top',\n        controls: defaultToolbarControls,\n        controlsConfig: defaultToolbarControlsConfiguration,\n    },\n};\n","/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param sources\n */\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            // noinspection JSUnfilteredForInLoop\n            if (isObject(source[key])) {\n                // noinspection JSUnfilteredForInLoop\n                if (!target[key]) {\n                    // noinspection JSUnfilteredForInLoop\n                    Object.assign(target, { [key]: {} });\n                }\n                // noinspection JSUnfilteredForInLoop\n                mergeDeep(target[key], source[key]);\n            } else {\n                // noinspection JSUnfilteredForInLoop\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n","export default {\n    controls: {\n        undo: {\n            title: 'Desfer',\n        },\n        redo: {\n            title: 'Refer',\n        },\n        bold: {\n            title: 'Negreta',\n        },\n        italic: {\n            title: 'Cursiva',\n        },\n        underline: {\n            title: 'Subratllat',\n        },\n        strikethrough: {\n            title: 'Ratllat',\n        },\n        code: {\n            title: 'Codi',\n        },\n        fontColor: {\n            title: 'Color de font',\n            labels: {\n                noColor: 'Sense color',\n            },\n        },\n        fontBackgroundColor: {\n            title: 'Color de resaltat del text',\n            labels: {\n                noColor: 'Sense color',\n            },\n        },\n        linkAdd: {\n            title: 'Afegir enllaç',\n            labels: {\n                link: 'Enllaç',\n            },\n            actions: {\n                add: 'Afegir',\n                cancel: 'Cancel·lar',\n            },\n        },\n        linkRemove: {\n            title: 'Eliminar enllaç',\n        },\n        image: {\n            title: 'Afegir imatge',\n            actions: {\n                upload: 'Pujar imatge',\n                url: 'Des de URL',\n                add: 'Afegir',\n                cancel: 'Cancel·lar',\n                alignLeft: \"Alinear a l'esquerra\",\n                alignCenter: 'Centrar',\n                alignRight: 'Alinear a la dreta',\n                remove: 'Eliminar imatge',\n                resize: 'Redimensionar',\n            },\n            labels: {\n                dropImageHere: 'Arrossega una imatge aquí o fes click per a pujar una',\n                width: 'Ample',\n                height: 'Alt',\n                url: 'URL',\n                insertOptions: 'Opcions de afegir imatge',\n                editOptions: \"Opcions d'imatge\",\n            },\n            errorMessages: {\n                notValidImage: 'La imatge no és vàlida',\n            },\n        },\n        blockType: {\n            title: 'Format de bloc',\n            labels: {\n                normal: 'Normal',\n                header1: 'Títol 1',\n                header2: 'Títol 2',\n                header3: 'Títol 3',\n                header4: 'Títol 4',\n                header5: 'Títol 5',\n                header6: 'Títol 6',\n            },\n        },\n        fontSize: {\n            title: 'Grandària de font',\n            labels: {\n                default: 'Per defecte',\n            },\n        },\n        fontFamily: {\n            title: 'Font',\n            labels: {\n                default: 'Per defecte',\n            },\n        },\n        textAlign: {\n            title: 'Alinear text',\n            actions: {\n                alignLeft: 'Esquerra',\n                alignCenter: 'Centre',\n                alignRight: 'Dreta',\n                justify: 'Justificar',\n            },\n        },\n        unorderedList: {\n            title: 'Vinyetes',\n        },\n        orderedList: {\n            title: 'Numeració',\n        },\n    },\n};\n","import ca from './translations/ca';\nimport en from './translations/en';\nimport es from './translations/es';\n\nexport default { ca, en, es };\n","export default {\n    controls: {\n        undo: {\n            title: 'Undo',\n        },\n        redo: {\n            title: 'Redo',\n        },\n        bold: {\n            title: 'Bold',\n        },\n        italic: {\n            title: 'Italic',\n        },\n        underline: {\n            title: 'Underline',\n        },\n        strikethrough: {\n            title: 'Strike through',\n        },\n        code: {\n            title: 'Code',\n        },\n        fontColor: {\n            title: 'Font color',\n            labels: {\n                noColor: 'None',\n            },\n        },\n        fontBackgroundColor: {\n            title: 'Highlight color',\n            labels: {\n                noColor: 'None',\n            },\n        },\n        linkAdd: {\n            title: 'Add link',\n            labels: {\n                link: 'Link',\n            },\n            actions: {\n                add: 'Add',\n                cancel: 'Cancel',\n            },\n        },\n        linkRemove: {\n            title: 'Remove link',\n        },\n        image: {\n            title: 'Insert image',\n            actions: {\n                upload: 'Upload image',\n                url: 'By URL',\n                add: 'Add',\n                cancel: 'Cancel',\n                alignLeft: 'Align left',\n                alignCenter: 'Align center',\n                alignRight: 'Align right',\n                remove: 'Remove image',\n                resize: 'Resize',\n            },\n            labels: {\n                dropImageHere: 'Drop image here or click to upload',\n                width: 'Width',\n                height: 'Height',\n                url: 'URL',\n                insertOptions: 'Insert image options',\n                editOptions: 'Image options',\n            },\n            errorMessages: {\n                notValidImage: 'Not a valid image',\n            },\n        },\n        blockType: {\n            title: 'Block format',\n            labels: {\n                normal: 'Normal',\n                header1: 'Header 1',\n                header2: 'Header 2',\n                header3: 'Header 3',\n                header4: 'Header 4',\n                header5: 'Header 5',\n                header6: 'Header 6',\n            },\n        },\n        fontSize: {\n            title: 'Font size',\n            labels: {\n                default: 'default',\n            },\n        },\n        fontFamily: {\n            title: 'Font type',\n            labels: {\n                default: 'default',\n            },\n        },\n        textAlign: {\n            title: 'Align text',\n            actions: {\n                alignLeft: 'Left',\n                alignCenter: 'Center',\n                alignRight: 'Right',\n                justify: 'Justify',\n            },\n        },\n        unorderedList: {\n            title: 'Unordered list',\n        },\n        orderedList: {\n            title: 'Ordered list',\n        },\n    },\n};\n","export default {\n    controls: {\n        undo: {\n            title: 'Deshacer',\n        },\n        redo: {\n            title: 'Rehacer',\n        },\n        bold: {\n            title: 'Negrita',\n        },\n        italic: {\n            title: 'Cursiva',\n        },\n        underline: {\n            title: 'Subrayado',\n        },\n        strikethrough: {\n            title: 'Tachado',\n        },\n        code: {\n            title: 'Código',\n        },\n        fontColor: {\n            title: 'Color de fuente',\n            labels: {\n                noColor: 'Sin color',\n            },\n        },\n        fontBackgroundColor: {\n            title: 'Color de resaltado de texto',\n            labels: {\n                noColor: 'Sin color',\n            },\n        },\n        linkAdd: {\n            title: 'Añadir enlace',\n            labels: {\n                link: 'Enlace',\n            },\n            actions: {\n                add: 'Añadir',\n                cancel: 'Cancelar',\n            },\n        },\n        linkRemove: {\n            title: 'Eliminar enlace',\n        },\n        image: {\n            title: 'Insertar imagen',\n            actions: {\n                upload: 'Subir imagen',\n                url: 'Desde URL',\n                add: 'Añadir',\n                cancel: 'Cancelar',\n                alignLeft: 'Alinear a la izquierda',\n                alignCenter: 'Centrar',\n                alignRight: 'Alinear a la derecha',\n                remove: 'Eliminar imagen',\n                resize: 'Redimensionar',\n            },\n            labels: {\n                dropImageHere: 'Arrastra una imagen aquí o haz click para subir una',\n                width: 'Ancho',\n                height: 'Alto',\n                url: 'URL',\n                insertOptions: 'Opciones de insertar imagen',\n                editOptions: 'Opciones de imagen',\n            },\n            errorMessages: {\n                notValidImage: 'La imagen no es válida',\n            },\n        },\n        blockType: {\n            title: 'Formato de bloque',\n            labels: {\n                normal: 'Normal',\n                header1: 'Encabezado 1',\n                header2: 'Encabezado 2',\n                header3: 'Encabezado 3',\n                header4: 'Encabezado 4',\n                header5: 'Encabezado 5',\n                header6: 'Encabezado 6',\n            },\n        },\n        fontSize: {\n            title: 'Tamaño de fuente',\n            labels: {\n                default: 'Por defecto',\n            },\n        },\n        fontFamily: {\n            title: 'Fuente',\n            labels: {\n                default: 'Por defecto',\n            },\n        },\n        textAlign: {\n            title: 'Alinear texto',\n            actions: {\n                alignLeft: 'Izquierda',\n                alignCenter: 'Centro',\n                alignRight: 'Derecha',\n                justify: 'Justificar',\n            },\n        },\n        unorderedList: {\n            title: 'Viñetas',\n        },\n        orderedList: {\n            title: 'Numeración',\n        },\n    },\n};\n","import React from 'react';\nimport { CompositeDecorator, DefaultDraftBlockRenderMap } from 'draft-js';\nimport { defaultConfig } from '../types/config';\nimport { defaultToolbarControlsConfiguration } from '../types/editorToolbar';\nimport { mergeDeep } from './objectUtils';\nimport languages from '../lang/languages';\n\nclass EditorFactories {\n    constructor(config) {\n        this.config = config || defaultConfig;\n    }\n\n    getCompositeDecorator() {\n        let decorators = [];\n        for (const control of this.getToolbarControls()) {\n            const pluginData = this.getPluginData(control);\n            if (pluginData && pluginData.decorators) {\n                decorators = decorators.concat(pluginData.decorators);\n            }\n        }\n        return decorators.length > 0 ? new CompositeDecorator(decorators) : null;\n    }\n\n    getCustomStyleMap() {\n        let customStyleMap = {};\n        for (const control of this.getToolbarControls()) {\n            const pluginData = this.getPluginData(control);\n            if (pluginData && pluginData.customStyleMap) {\n                customStyleMap = {\n                    ...customStyleMap,\n                    ...pluginData.customStyleMap,\n                };\n            }\n        }\n        return customStyleMap;\n    }\n\n    getBlockRenderMap() {\n        let renderMap = DefaultDraftBlockRenderMap;\n        for (const control of this.getToolbarControls()) {\n            const pluginData = this.getPluginData(control);\n            if (pluginData && pluginData.blockRenderMap) {\n                renderMap = renderMap.merge(pluginData.blockRenderMap);\n            }\n        }\n\n        return renderMap;\n    }\n\n    getBlockStyleFn() {\n        return (contentBlock) => {\n            let classNames = '';\n            for (const control of this.getToolbarControls()) {\n                const pluginData = this.getPluginData(control);\n                if (pluginData && pluginData.blockStyleFn) {\n                    const result = pluginData.blockStyleFn(contentBlock);\n                    if (result) classNames += ' ' + result;\n                }\n            }\n            return classNames.trim();\n        };\n    }\n\n    getBlockRendererFn() {\n        return (contentBlock) => {\n            for (const control of this.getToolbarControls()) {\n                const pluginData = this.getPluginData(control);\n                if (!pluginData || !pluginData.blockRendererFn) continue;\n                const result = pluginData.blockRendererFn(contentBlock);\n                if (result) return result;\n            }\n        };\n    }\n\n    getToolbarControls() {\n        return this.getConfigItem('toolbar', 'controls');\n    }\n\n    getToolbarControlComponents() {\n        const keyCounter = {};\n        return this.getToolbarControls().map((control) => {\n            if (!keyCounter[control.name]) keyCounter[control.name] = 0;\n            keyCounter[control.name]++;\n\n            return React.createElement(control.component, {\n                key: `${control.name}${keyCounter[control.name]}`,\n                configuration: this.getToolbarControlConfiguration(control.name),\n                defaultConfiguration: defaultToolbarControlsConfiguration[control.name],\n                pluginData: this.getPluginData(control),\n            });\n        });\n    }\n\n    getToolbarControlConfiguration(controlName) {\n        if (\n            this.config &&\n            this.config.toolbar &&\n            this.config.toolbar.controlsConfig &&\n            this.config.toolbar.controlsConfig[controlName]\n        )\n            return this.config.toolbar.controlsConfig[controlName];\n        else if (defaultToolbarControlsConfiguration[controlName])\n            return defaultToolbarControlsConfiguration[controlName];\n\n        return null;\n    }\n\n    getPluginData(control) {\n        if (!control.plugin) return null;\n        return control.plugin(\n            this.getToolbarControlConfiguration(control.name),\n            defaultToolbarControlsConfiguration[control.name]\n        );\n    }\n\n    getTranslations() {\n        const lang = this.getConfigItem('lang');\n        const langTranslations = languages[lang];\n        const customTranslations = this.config.translations || {};\n        return mergeDeep(langTranslations, customTranslations);\n    }\n\n    getToolbarPosition() {\n        return this.getConfigItem('toolbar', 'position').toLowerCase();\n    }\n\n    getConfigItem(...keys) {\n        let item = { ...this.config };\n        for (const key of keys) {\n            item = item[key];\n            if (item === undefined) break;\n        }\n\n        if (item !== undefined) return item;\n\n        item = { ...defaultConfig };\n        for (const key of keys) {\n            item = item[key];\n        }\n\n        return item;\n    }\n}\n\nexport default EditorFactories;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\n\nfunction EditorToolbar({ children, visible = true, ...rest }) {\n    return (\n        <Paper hidden={!visible} {...rest}>\n            <Grid container alignItems=\"center\">\n                {children}\n            </Grid>\n        </Paper>\n    );\n}\n\nEditorToolbar.propTypes = {\n    children: PropTypes.any,\n    visible: PropTypes.bool,\n};\n\nexport default EditorToolbar;\n","export default class Translator {\n    constructor(translations) {\n        this.translations = translations;\n    }\n\n    get(id) {\n        if (!id) return '';\n        const keys = id.split('.');\n        let item = this.translations;\n        for (const key of keys) {\n            item = item[key];\n            if (item === undefined) return '';\n        }\n        return item || '';\n    }\n}\n","import blockStyles from '../../types/blockStyles';\n\nexport const blockHTMLMap = {\n    [blockStyles.H1]: 'h1',\n    [blockStyles.H2]: 'h2',\n    [blockStyles.H3]: 'h3',\n    [blockStyles.H4]: 'h4',\n    [blockStyles.H5]: 'h5',\n    [blockStyles.H6]: 'h6',\n    [blockStyles.BLOCKQUOTE]: 'blockquote',\n    [blockStyles.CODE_BLOCK]: 'code',\n    [blockStyles.UNSTYLED]: 'p',\n    [blockStyles.ATOMIC]: 'figure',\n    [blockStyles.UL]: 'li',\n    [blockStyles.OL]: 'li',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Editor, EditorState, RichUtils } from 'draft-js';\nimport EditorFactories from './utils/EditorFactories';\nimport EditorToolbar from './EditorToolbar';\nimport Paper from '@mui/material/Paper';\nimport { defaultConfig } from './types/config';\nimport Translator from './lang/Translator';\nimport { makeStyles } from '@mui/styles';\nimport toHTML from './conversion/toHTML';\nimport useEditor from './hooks/useEditor';\nimport useEditorFocus from './hooks/useEditorFocus';\nimport 'draft-js/dist/Draft.css';\n\nexport { toolbarControlTypes } from './types/editorToolbar';\nexport { LANG_PREFIX } from './types/lang';\nexport { fileToBase64 } from './utils/fileUtils';\nexport { toHTML, useEditor, useEditorFocus };\n\nexport const EditorContext = React.createContext({});\n\nexport const MUIEditorState = {\n    createEmpty: (config) => {\n        const editorFactories = new EditorFactories(config);\n        return EditorState.createEmpty(editorFactories.getCompositeDecorator());\n    },\n    createWithContent: (config, contentState) => {\n        const editorFactories = new EditorFactories(config);\n        return EditorState.createWithContent(contentState, editorFactories.getCompositeDecorator());\n    },\n};\n\nconst useStyles = makeStyles((theme) => ({\n    '@global': {\n        '.mui-editor-left-aligned-block': {\n            textAlign: 'left !important',\n            '& > div': {\n                textAlign: 'left !important',\n            },\n        },\n        '.mui-editor-center-aligned-block': {\n            textAlign: 'center !important',\n            '& > div': {\n                textAlign: 'center !important',\n            },\n        },\n        '.mui-editor-right-aligned-block': {\n            textAlign: 'right !important',\n            '& > div': {\n                textAlign: 'right !important',\n            },\n        },\n        '.mui-editor-justify-aligned-block': {\n            textAlign: 'justify !important',\n            '& > div': {\n                textAlign: 'justify !important',\n            },\n        },\n    },\n    editorWrapper: {\n        marginTop: 2, //theme.spacing(2),\n        marginBottom: 2,//theme.spacing(2),\n        padding: 5, //theme.spacing(5),\n    },\n}));\n\n/**\n * Material UI Draft.js editor\n *\n * @version 1.0.3\n * @author [Rubén Albarracín](https://github.com/Kelsier90)\n */\nfunction MUIEditor({\n    editorState,\n    onChange,\n    onFocus = null,\n    onBlur = null,\n    config = defaultConfig,\n}) {\n    const editorFactories = new EditorFactories(config);\n    const editorRef = React.useRef(null);\n    const translateRef = React.useRef(function () { });\n    const translationsRef = React.useRef(null);\n    const toolbarVisibleConfig = editorFactories.getConfigItem('toolbar', 'visible');\n    const [isToolbarVisible, setIsToolbarVisible] = React.useState(toolbarVisibleConfig);\n    const [isResizeImageDialogVisible, setIsResizeImageDialogVisible] = React.useState(false);\n    const [resizeImageEntityKey, setResizeImageEntityKey] = React.useState(null);\n\n    translationsRef.current = editorFactories.getTranslations();\n    translateRef.current = React.useCallback((id) => {\n        const translator = new Translator(translationsRef.current);\n        return translator.get(id);\n    }, []);\n    const classes = useStyles();\n\n    React.useEffect(() => {\n        setIsToolbarVisible(toolbarVisibleConfig);\n    }, [toolbarVisibleConfig]);\n\n    const toolbar = (\n        <EditorToolbar\n            visible={isToolbarVisible}\n            style={editorFactories.getConfigItem('toolbar', 'style')}\n            className={editorFactories.getConfigItem('toolbar', 'className')}>\n            {editorFactories.getToolbarControlComponents()}\n        </EditorToolbar>\n    );\n\n    const top = editorFactories.getToolbarPosition() === 'top' ? toolbar : null;\n    const bottom = editorFactories.getToolbarPosition() === 'bottom' ? toolbar : null;\n\n    const handleKeyCommand = (command) => {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            onChange(newState);\n            return 'handled';\n        }\n        return 'not-handled';\n    };\n\n    const handleFocus = (ev) => {\n        if (onFocus) onFocus(ev);\n    };\n\n    const handleBlur = (ev) => {\n        if (onBlur) onBlur(ev);\n    };\n\n    const editorWrapperProps = {\n        style: editorFactories.getConfigItem('editor', 'style'),\n        className: `${classes.editorWrapper} ${editorFactories.getConfigItem(\n            'editor',\n            'className'\n        )}`,\n        onClick: () => editorRef.current.focus(),\n    };\n\n    const editorWrapperElement = editorFactories.getConfigItem('editor', 'wrapperElement');\n\n    if (editorWrapperElement === Paper) {\n        editorWrapperProps.elevation = 3;\n    }\n\n    const EditorWrapper = React.createElement(\n        editorWrapperElement,\n        editorWrapperProps,\n        <Editor\n            {...editorFactories.getConfigItem('draftEditor')}\n            ref={editorRef}\n            editorState={editorState}\n            onChange={onChange}\n            onFocus={(ev) => handleFocus(ev)}\n            onBlur={(ev) => handleBlur(ev)}\n            handleKeyCommand={handleKeyCommand}\n            blockStyleFn={editorFactories.getBlockStyleFn()}\n            customStyleMap={editorFactories.getCustomStyleMap()}\n            blockRenderMap={editorFactories.getBlockRenderMap()}\n            blockRendererFn={editorFactories.getBlockRendererFn()}\n        />\n    );\n\n    return (\n        <EditorContext.Provider\n            value={{\n                editorState,\n                onChange,\n                ref: editorRef.current,\n                translate: translateRef.current,\n                showResizeImageDialog: (entityKey) => {\n                    setIsResizeImageDialogVisible(true);\n                    setResizeImageEntityKey(entityKey);\n                },\n                hideResizeImageDialog: () => {\n                    setIsResizeImageDialogVisible(false);\n                    setResizeImageEntityKey(null);\n                },\n                isResizeImageDialogVisible,\n                resizeImageEntityKey,\n            }}>\n            {top}\n            {EditorWrapper}\n            {bottom}\n        </EditorContext.Provider>\n    );\n}\n\nMUIEditor.displayName = 'MUIEditor';\n\nMUIEditor.propTypes = {\n    /** Immutable object that represents the entire state of the editor */\n    editorState: PropTypes.object.isRequired,\n    /** The function to be executed by the Editor when edits and selection changes occur. The new editor state is passed by parameter. */\n    onChange: PropTypes.func.isRequired,\n    /** The function to be executed by the Editor when a focus event is triggered. The new editor state is passed by parameter. */\n    onFocus: PropTypes.func,\n    /** The function to be executed by the Editor when a blur event is triggered. The new editor state is passed by parameter. */\n    onBlur: PropTypes.func,\n    /** All the editor configuration options */\n    config: PropTypes.object,\n};\n\nMUIEditor.defaultProps = {\n    config: defaultConfig,\n};\n\nexport default MUIEditor;\n","export default {\n    H1: 'header-one',\n    H2: 'header-two',\n    H3: 'header-three',\n    H4: 'header-four',\n    H5: 'header-five',\n    H6: 'header-six',\n    UL: 'unordered-list-item',\n    OL: 'ordered-list-item',\n    BLOCKQUOTE: 'blockquote',\n    CODE_BLOCK: 'code-block',\n    UNSTYLED: 'unstyled',\n    ATOMIC: 'atomic',\n};\n","import blockStyles from '../../types/blockStyles';\n\nexport const blockHTMLMap = {\n    [blockStyles.H1]: 'h1',\n    [blockStyles.H2]: 'h2',\n    [blockStyles.H3]: 'h3',\n    [blockStyles.H4]: 'h4',\n    [blockStyles.H5]: 'h5',\n    [blockStyles.H6]: 'h6',\n    [blockStyles.BLOCKQUOTE]: 'blockquote',\n    [blockStyles.CODE_BLOCK]: 'code',\n    [blockStyles.UNSTYLED]: 'p',\n    [blockStyles.ATOMIC]: 'figure',\n    [blockStyles.UL]: 'li',\n    [blockStyles.OL]: 'li',\n};\n","import entities from '../../types/entities';\n\nexport const entityHTMLMap = {\n    [entities.LINK]: (entity) => [`<a href=\"${entity.getData().url}\" target=\"_blank\">`, '</a>'],\n    [entities.IMAGE]: (entity) => [\n        `<img src=\"${entity.data.src}\" alt=\"\" width=\"${entity.getData().width}\" height=\"${\n            entity.getData().height\n        }\">`,\n        '',\n    ],\n};\n","export default {\n    LINK: 'LINK',\n    IMAGE: 'IMAGE',\n};\n","export default {\n    BOLD: 'BOLD',\n    ITALIC: 'ITALIC',\n    UNDERLINE: 'UNDERLINE',\n    STRIKETHROUGH: 'STRIKETHROUGH',\n    CODE: 'CODE',\n    FONT_FAMILY: 'FONT_FAMILY',\n    FONT_SIZE: 'FONT_SIZE',\n    FONT_COLOR: 'FONT_COLOR',\n    FONT_BACKGROUND: 'FONT_BACKGROUND',\n};\n","import inlineStyles from '../../types/inlineStyles';\n\nconst isInlineStyleCollection = (inlineStyle, style) =>\n    inlineStyle.substr(0, style.length) === style;\nconst getInlineStyleCollectionValue = (inlineStyle, style) => inlineStyle.substr(style.length + 1);\nexport const getInlineStylesCss = (inlineStyle) => {\n    switch (inlineStyle) {\n        case inlineStyles.BOLD:\n            return 'font-weight: bold;';\n        case inlineStyles.ITALIC:\n            return 'font-style: italic;';\n        case inlineStyles.UNDERLINE:\n            return 'text-decoration: underline;';\n        case inlineStyles.STRIKETHROUGH:\n            return 'text-decoration: line-through;';\n        case inlineStyles.CODE:\n            return 'font-family: monospace;';\n        default:\n            if (isInlineStyleCollection(inlineStyle, inlineStyles.FONT_FAMILY)) {\n                return `font-family: '${getInlineStyleCollectionValue(\n                    inlineStyle,\n                    inlineStyles.FONT_FAMILY\n                )}';`;\n            }\n\n            if (isInlineStyleCollection(inlineStyle, inlineStyles.FONT_SIZE)) {\n                return `font-size: ${getInlineStyleCollectionValue(\n                    inlineStyle,\n                    inlineStyles.FONT_SIZE\n                )};`;\n            }\n\n            if (isInlineStyleCollection(inlineStyle, inlineStyles.FONT_COLOR)) {\n                return `color: ${getInlineStyleCollectionValue(\n                    inlineStyle,\n                    inlineStyles.FONT_COLOR\n                )};`;\n            }\n\n            if (isInlineStyleCollection(inlineStyle, inlineStyles.FONT_BACKGROUND)) {\n                return `background-color: ${getInlineStyleCollectionValue(\n                    inlineStyle,\n                    inlineStyles.FONT_BACKGROUND\n                )};`;\n            }\n\n            return '';\n    }\n};\n","import { blockHTMLMap } from './block';\nimport { entityHTMLMap } from './entity';\nimport { getInlineStylesCss } from './inlineStyle';\nimport blockStyles from '../../types/blockStyles';\n\nconst toHTML = (contentState) => {\n    let html = '';\n    let isListBlock = false;\n    const blockMap = contentState.getBlockMap();\n    let blockCount = 0;\n    for (const blockData of blockMap) {\n        const block = blockData[1];\n        // Block tags\n        const blockTag = blockHTMLMap[block.getType()];\n        const blockStyle = block.getData().has('textAlign')\n            ? `text-align:${block.getData().get('textAlign')};`\n            : null;\n        let blockOpenTag = blockTag\n            ? `<${blockTag}${blockStyle ? ` style=\"${blockStyle}\"` : ''}>`\n            : '';\n        let blockCloseTag = blockTag ? `</${blockTag}>` : '';\n\n        if (block.getType() === blockStyles.UL || block.getType() === blockStyles.OL) {\n            if (!isListBlock) {\n                blockOpenTag = `${\n                    block.getType() === blockStyles.UL ? '<ul>' : '<ol>'\n                }${blockOpenTag}`;\n            }\n            // if is the last block closes the list\n            if (blockCount === blockMap.length - 1) {\n                blockCloseTag = `${blockCloseTag}${\n                    block.getType() === blockStyles.UL ? '</ul>' : '</ol>'\n                }`;\n            }\n            isListBlock = true;\n        } else {\n            // Closes the previous opened list\n            if (isListBlock) {\n                blockOpenTag = `${\n                    block.getType() === blockStyles.UL ? '</ul>' : '</ol>'\n                }${blockOpenTag}`;\n            }\n            isListBlock = false;\n        }\n\n        if (block.getLength() === 0) {\n            html += blockOpenTag + blockCloseTag;\n            continue;\n        }\n\n        html += blockOpenTag;\n        let lastEntityKey = null;\n        const currentOpenedStylesMap = {};\n        for (const charIndex in block.getText()) {\n            const isLastChar = parseInt(charIndex) === block.getLength() - 1;\n            // Entities\n            let entityOpenTag = '';\n            let entityCloseTag = '';\n            const currentEntityKey = block.getEntityAt(charIndex);\n            if (currentEntityKey !== lastEntityKey) {\n                if (lastEntityKey === null) {\n                    const entity = contentState.getEntity(currentEntityKey);\n                    entityOpenTag = entityHTMLMap[entity.getType()](entity)[0];\n                } else if (currentEntityKey === null) {\n                    const entity = contentState.getEntity(lastEntityKey);\n                    entityCloseTag = entityHTMLMap[entity.getType()](entity)[1];\n                } else {\n                    const entityHaveToClose = contentState.getEntity(lastEntityKey);\n                    const entityHaveToOpen = contentState.getEntity(currentEntityKey);\n                    entityOpenTag =\n                        entityHTMLMap[entityHaveToClose.getType()](entityHaveToClose)[0] +\n                        entityHTMLMap[entityHaveToOpen.getType()](entityHaveToOpen)[1];\n                }\n            } else if (currentEntityKey !== null && isLastChar) {\n                const entity = contentState.getEntity(currentEntityKey);\n                entityCloseTag = entityHTMLMap[entity.getType()](entity)[1];\n            }\n\n            // Inline styles\n            const charInlineStyles = block.getInlineStyleAt(charIndex);\n            const styleCloseTagBeforeList = [];\n            const styleOpenTagList = [];\n            const styleCloseTagList = [];\n            const styleCloseTagOpenIndexList = [];\n            const styleCloseTagBeforeOpenIndexList = [];\n\n            for (const inlineStyle of charInlineStyles) {\n                if (currentOpenedStylesMap[inlineStyle] === undefined) {\n                    styleOpenTagList.push(inlineStyle);\n                    currentOpenedStylesMap[inlineStyle] = charIndex;\n                } else if (entityOpenTag || entityCloseTag) {\n                    styleCloseTagBeforeList.push(inlineStyle);\n                    styleCloseTagBeforeOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                    delete currentOpenedStylesMap[inlineStyle];\n                } else if (isLastChar) {\n                    styleCloseTagList.push(inlineStyle);\n                    styleCloseTagOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                    delete currentOpenedStylesMap[inlineStyle];\n                }\n            }\n\n            for (const inlineStyle in currentOpenedStylesMap) {\n                if (\n                    !charInlineStyles.includes(inlineStyle) &&\n                    !styleCloseTagList.includes(inlineStyle) &&\n                    !styleCloseTagBeforeList.includes(inlineStyle)\n                ) {\n                    styleCloseTagBeforeList.push(inlineStyle);\n                    styleCloseTagBeforeOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                    delete currentOpenedStylesMap[inlineStyle];\n                } else if (isLastChar) {\n                    styleCloseTagList.push(inlineStyle);\n                    styleCloseTagOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                    delete currentOpenedStylesMap[inlineStyle];\n                }\n            }\n\n            for (const closedIndex of styleCloseTagOpenIndexList) {\n                for (const inlineStyle in currentOpenedStylesMap) {\n                    if (currentOpenedStylesMap[inlineStyle] > closedIndex) {\n                        styleCloseTagList.push(inlineStyle);\n                        styleCloseTagOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                        delete currentOpenedStylesMap[inlineStyle];\n                    }\n                }\n            }\n\n            for (const closedIndex of styleCloseTagBeforeOpenIndexList) {\n                for (const inlineStyle in currentOpenedStylesMap) {\n                    if (\n                        currentOpenedStylesMap[inlineStyle] < charIndex &&\n                        currentOpenedStylesMap[inlineStyle] > closedIndex\n                    ) {\n                        styleCloseTagBeforeList.push(inlineStyle);\n                        styleCloseTagBeforeOpenIndexList.push(currentOpenedStylesMap[inlineStyle]);\n                        delete currentOpenedStylesMap[inlineStyle];\n                        if (charInlineStyles.includes(inlineStyle)) {\n                            styleOpenTagList.push(inlineStyle);\n                            currentOpenedStylesMap[inlineStyle] = charIndex;\n                        }\n                    }\n                }\n            }\n\n            // HTML Build\n            let j = 0;\n            while (j < styleCloseTagBeforeList.length) {\n                html += '</span>';\n                j++;\n            }\n            html += entityOpenTag;\n            for (const style of styleOpenTagList) {\n                html += '<span style=\"' + getInlineStylesCss(style) + '\">';\n            }\n            html += block.getText()[charIndex];\n            let k = 0;\n            while (k < styleCloseTagList.length) {\n                html += '</span>';\n                k++;\n            }\n            html += entityCloseTag;\n\n            lastEntityKey = currentEntityKey;\n        }\n        html += blockCloseTag;\n        blockCount++;\n    }\n    return html;\n};\n\nexport default toHTML;\n","import React from 'react';\nimport MUIEditor, { MUIEditorState } from 'react-mui-draft-wysiwyg';\nimport toHTML from 'react-mui-draft-wysiwyg/src/conversion/toHTML';\nimport Container from '@mui/material/Container';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { makeStyles } from '@mui/styles';\nimport Grid from '@mui/material/Grid';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\n\nconst useStyles = makeStyles((theme) => ({\n    optionsWrapper: {\n        paddingTop: 5, //theme.spacing(5),\n        paddingBottom: 3 //theme.spacing(3),\n    },\n}));\n\nfunction App() {\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty());\n    const [isReadOnly, setIsReadOnly] = React.useState(false);\n    const [lang, setLang] = React.useState('en');\n    const [toolbarPosition, setToolbarPosition] = React.useState('top');\n    const [html, setHtml] = React.useState('');\n    const classes = useStyles();\n\n    const onChange = (newState) => {\n        setEditorState(newState);\n        setHtml(toHTML(newState.getCurrentContent()));\n    };\n\n    return (\n        <Container>\n            <div className={classes.optionsWrapper}>\n                <Grid container alignItems=\"center\" justify=\"flex-end\" spacing={4}>\n                    <Grid item>\n                        <FormControlLabel\n                            control={\n                                <Switch\n                                    checked={isReadOnly}\n                                    onChange={(ev) => setIsReadOnly(ev.target.checked)}\n                                />\n                            }\n                            label=\"Read only\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <InputLabel id=\"toolbar-position-select-label\">Toolbar position</InputLabel>\n                        <Select\n                            fullWidth\n                            labelId=\"toolbar-position-select-label\"\n                            id=\"toolbar-position-select\"\n                            value={toolbarPosition}\n                            onChange={(ev) => setToolbarPosition(ev.target.value)}>\n                            <MenuItem value=\"invisible\">Invisible</MenuItem>\n                            <MenuItem value=\"top\">Top</MenuItem>\n                            <MenuItem value=\"bottom\">Bottom</MenuItem>\n                        </Select>\n                    </Grid>\n\n                    <Grid item>\n                        <InputLabel id=\"lang-select-label\">Language</InputLabel>\n                        <Select\n                            fullWidth\n                            labelId=\"lang-select-label\"\n                            id=\"lang-select\"\n                            value={lang}\n                            onChange={(ev) => setLang(ev.target.value)}>\n                            <MenuItem value=\"en\">English</MenuItem>\n                            <MenuItem value=\"es\">Spanish</MenuItem>\n                            <MenuItem value=\"ca\">Catalan</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n            </div>\n\n            <MUIEditor\n                editorState={editorState}\n                onChange={onChange}\n                config={{\n                    lang,\n                    draftEditor: { readOnly: isReadOnly },\n                    toolbar: {\n                        visible: toolbarPosition !== 'invisible',\n                        position: toolbarPosition === 'invisible' ? 'top' : toolbarPosition,\n                    },\n                }}\n            />\n\n            <pre>{html}</pre>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}